[{"/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/index.js":"1","/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/reportWebVitals.js":"2","/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/App.js":"3","/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/pages/HowToPlay.js":"4","/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/pages/Game.js":"5","/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/pages/Avatar.js":"6","/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/pages/MainMenu.js":"7","/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/pages/Admin.js":"8","/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/pages/Leaderboard.js":"9","/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/components/Scoreboard.js":"10","/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/components/StartModal.js":"11","/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/components/InputForm.js":"12","/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/components/ResultModal.js":"13","/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/components/Status.js":"14","/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/components/CountdownTimer.js":"15","/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/components/AvatarSelection.js":"16","/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/components/Loading.js":"17","/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/components/Choice.js":"18","/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/components/Error.js":"19","/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/components/GridBlock.js":"20","/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/components/ShowAvatar.js":"21","/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/components/Wait.js":"22","/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/components/Input.js":"23","/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/components/ChoiceButton.js":"24","/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/components/BlockElement.js":"25"},{"size":535,"mtime":1699551541315,"results":"26","hashOfConfig":"27"},{"size":364,"mtime":1699551541316,"results":"28","hashOfConfig":"27"},{"size":2457,"mtime":1699552942934,"results":"29","hashOfConfig":"27"},{"size":2423,"mtime":1699553660194,"results":"30","hashOfConfig":"27"},{"size":8081,"mtime":1699551541315,"results":"31","hashOfConfig":"27"},{"size":4172,"mtime":1699551541315,"results":"32","hashOfConfig":"27"},{"size":15253,"mtime":1699551541316,"results":"33","hashOfConfig":"27"},{"size":836,"mtime":1699551541315,"results":"34","hashOfConfig":"27"},{"size":6552,"mtime":1699551541316,"results":"35","hashOfConfig":"27"},{"size":355,"mtime":1699551541314,"results":"36","hashOfConfig":"27"},{"size":1059,"mtime":1699551541314,"results":"37","hashOfConfig":"27"},{"size":3445,"mtime":1699551541313,"results":"38","hashOfConfig":"27"},{"size":2143,"mtime":1699551541313,"results":"39","hashOfConfig":"27"},{"size":274,"mtime":1699551541314,"results":"40","hashOfConfig":"27"},{"size":3891,"mtime":1699554265060,"results":"41","hashOfConfig":"27"},{"size":397,"mtime":1699551541313,"results":"42","hashOfConfig":"27"},{"size":316,"mtime":1699551541313,"results":"43","hashOfConfig":"27"},{"size":794,"mtime":1699551541313,"results":"44","hashOfConfig":"27"},{"size":246,"mtime":1699551541313,"results":"45","hashOfConfig":"27"},{"size":318,"mtime":1699551541313,"results":"46","hashOfConfig":"27"},{"size":1286,"mtime":1699551541314,"results":"47","hashOfConfig":"27"},{"size":3166,"mtime":1699551541314,"results":"48","hashOfConfig":"27"},{"size":326,"mtime":1699551541313,"results":"49","hashOfConfig":"27"},{"size":377,"mtime":1699551541313,"results":"50","hashOfConfig":"27"},{"size":988,"mtime":1699551541313,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},"1w06v8f",{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"55"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"55"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"115","messages":"116","suppressedMessages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"55"},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"55"},"/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/index.js",[],[],["132"],"/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/reportWebVitals.js",[],[],"/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/App.js",[],[],"/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/pages/HowToPlay.js",[],[],"/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/pages/Game.js",["133","134","135"],[],"import React, { useState, useEffect } from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport io from \"socket.io-client\";\nimport qs from \"qs\";\n\nimport Wait from \"../components/Wait\";\nimport Status from \"../components/Status\";\nimport GridBlock from \"../components/GridBlock\";\nimport Scoreboard from \"../components/Scoreboard\";\nimport ResultModal from \"../components/ResultModal\";\nimport ShowAvatar from \"../components/ShowAvatar\";\nimport StartModal from \"../components/StartModal\";\nimport CountdownTimer from \"../components/CountdownTimer\";\nimport bombImg from \"../assets/bomb.svg\";\nimport axios from \"axios\";\n\nconst ENDPOINT = process.env.REACT_APP_IP_BACK || \"http://localhost:9000/\";\nconst socket = io.connect(ENDPOINT);\n\nconst Game = ({ nightTheme }) => {\n  const [playerName, setPlayerName] = useState(\"\");\n  const [minefield, setMinefield] = useState(null);\n  const [size, setSize] = useState(0);\n  const [game, setGame] = useState(null);\n  const [difficulty, setDifficulty] = useState(\"\");\n  const [playerIndex, setPlayerIndex] = useState(-1);\n  const [firstPlayer, setFirstPlayer] = useState(-1);\n  const [turn, setTurn] = useState(true);\n  const [start, setStart] = useState(false);\n  const [timer, setTimer] = useState(false);\n  const [end, setEnd] = useState(false);\n  const [room, setRoom] = useState(\"\");\n  const [statusMessage, setStatusMessage] = useState(\"\");\n  const [currentPlayerScore, setCurrentPlayerScore] = useState(0);\n  const [opponentPlayer, setOpponentPlayer] = useState([]);\n  const [selectedAvatar, setSelectedAvatar] = useState(null);\n  const [opponentAvatar, setOpponentAvatar] = useState(null);\n  const [waiting, setWaiting] = useState(false);\n  const [joinError, setJoinError] = useState(false);\n\n  const handleClick = (row, col) => {\n    if (!game[row][col] && !end && turn) {\n      socket.emit(\"move\", { room, playerIndex, row, col });\n    }\n  };\n\n  const handleTimeout = () => {\n    setTimer(false);\n    if (!end && turn) {\n      socket.emit(\"move\", { room });\n    }\n  };\n\n  const handleUpdate = (gameState, turnInd, scoreArray) => {\n    setGame(gameState);\n    setTurn(playerIndex === turnInd);\n    setStatusMessage(\n      playerIndex === turnInd ? \"Your Turn\" : `${opponentPlayer[0]}'s Turn`\n    );\n    setCurrentPlayerScore(scoreArray[playerIndex]);\n    let currentOpponentPlayer = [...opponentPlayer];\n    currentOpponentPlayer[1] = scoreArray[playerIndex === 0 ? 1 : 0];\n    setOpponentPlayer(currentOpponentPlayer);\n    setTimer(true);\n  };\n\n  const handleWin = async (gameState, scoreArray) => {\n    setGame(gameState);\n    setCurrentPlayerScore(scoreArray[playerIndex]);\n    let currentOpponentPlayer = [...opponentPlayer];\n    currentOpponentPlayer[1] = scoreArray[playerIndex === 0 ? 1 : 0];\n    setOpponentPlayer(currentOpponentPlayer);\n    setEnd(true);\n    await axios.post(\n      `${ENDPOINT}/score/new-score?name=${playerName}&score=${currentPlayerScore}&difficulty=${difficulty}`\n    );\n  };\n\n  const handleRestartButton = () => {\n    socket.emit(\"playAgainRequest\", room);\n  };\n\n  const handleRestart = (gameState, turnInd, minefield) => {\n    setGame(gameState);\n    setEnd(false);\n    setStatusMessage(\n      playerIndex === turnInd ? \"Your Turn\" : `${opponentPlayer[0]}'s Turn`\n    );\n    setCurrentPlayerScore(0);\n    let currentOpponentPlayer = [...opponentPlayer];\n    currentOpponentPlayer[1] = 0;\n    setOpponentPlayer(currentOpponentPlayer);\n    setMinefield(minefield);\n  };\n\n  const renderGrid = (row, col) => {\n    if (minefield) {\n      let index = row * size + col;\n      return (\n        <GridBlock\n          key={index}\n          id={index}\n          player={playerIndex}\n          mine={minefield[row][col]}\n          revealed={game[row][col]}\n          size={size}\n          end={end}\n          turn={turn}\n          onClick={handleClick}\n        />\n      );\n    }\n    return <div></div>;\n  };\n\n  useEffect(() => {\n    let { room, name, difficulty, playerIndex, avatar } = qs.parse(\n      window.location.search,\n      {\n        ignoreQueryPrefix: true,\n      }\n    );\n    playerIndex = Number(playerIndex);\n    if (avatar === \"undefined\" || avatar === \"null\") avatar = \"avatar1\";\n    setPlayerName(name);\n    setRoom(room);\n    setPlayerIndex(playerIndex);\n    setSelectedAvatar(avatar);\n    setDifficulty(difficulty);\n    if (difficulty === \"easy\") {\n      setSize(6);\n    } else if (difficulty === \"medium\") {\n      setSize(9);\n    } else if (difficulty === \"hard\") {\n      setSize(12);\n    }\n    socket.emit(\"newRoomJoin\", {\n      room,\n      name,\n      difficulty,\n      avatar,\n      playerIndex,\n    });\n  }, []);\n\n  useEffect(() => {\n    socket.on(\"waiting\", () => setWaiting(true));\n\n    socket.on(\n      \"starting\",\n      ({ minefield, gameState, players, turnInd, avatars }) => {\n        setMinefield(minefield);\n        setWaiting(false);\n        setOpponentAvatar(avatars[playerIndex === 0 ? 1 : 0]);\n        const opponent = players[playerIndex === 0 ? 1 : 0][1];\n        setOpponentPlayer([opponent, 0]);\n        setEnd(false);\n        setGame(gameState);\n        console.log(minefield);\n        setTurn(playerIndex === turnInd);\n        setStatusMessage(\n          playerIndex === turnInd ? \"Your Turn\" : `${opponent}'s Turn`\n        );\n        setStart(true);\n      }\n    );\n\n    socket.on(\"setFirstPlayer\", ({ firstPlayer }) => {\n      setFirstPlayer(firstPlayer);\n    });\n\n    socket.on(\"joinError\", () => setJoinError(true));\n\n    return () => {\n      socket.off(\"waiting\");\n      socket.off(\"starting\");\n      socket.off(\"joinError\");\n    };\n  }, [\n    socket,\n    selectedAvatar,\n    opponentAvatar,\n    minefield,\n    waiting,\n    playerIndex,\n    start,\n  ]);\n\n  useEffect(() => {\n    socket.on(\"update\", ({ gameState, turnInd, scoreArray }) =>\n      handleUpdate(gameState, turnInd, scoreArray)\n    );\n    socket.on(\"winner\", ({ gameState, scoreArray }) =>\n      handleWin(gameState, scoreArray)\n    );\n    socket.on(\"restart\", ({ gameState, turnInd, minefield }) =>\n      handleRestart(gameState, turnInd, minefield)\n    );\n    return () => {\n      socket.off(\"update\");\n      socket.off(\"winner\");\n      socket.off(\"restart\");\n    };\n  }, [statusMessage, end, game, currentPlayerScore, opponentPlayer]);\n\n  if (joinError) {\n    return <Navigate to={\"/\"} />;\n  } else {\n    const gridArray = [];\n    for (let i = 0; i < size * size; i++) {\n      const newGridBlock = renderGrid(Math.floor(i / size), i % size);\n      gridArray.push(newGridBlock);\n    }\n    return (\n      <>\n        <div className={`findmymines-text${nightTheme ? \"-night\" : \"\"}`}>\n          FINDMYMINES\n        </div>\n        <StartModal start={start} setStart={setStart} />\n        <Wait display={waiting} room={room} nightTheme={nightTheme} />\n        <Status message={statusMessage} nightTheme={nightTheme} />\n        <CountdownTimer\n          isActive={timer}\n          onTimeout={handleTimeout}\n          nightTheme={nightTheme}\n        />\n        <div className={`in-line-grid${nightTheme ? \"-night\" : \"\"}`}>\n          <div>\n            <Scoreboard player={playerName} nightTheme={nightTheme} />\n            <ShowAvatar avatar={selectedAvatar} />\n            <div className=\"bombscore\">\n              <img src={bombImg} width=\"75px\" height=\"75px\" alt=\"bomb\" />\n              <Scoreboard playerScore={currentPlayerScore} />\n            </div>\n          </div>\n\n          <div className={`grid-div-${size}${nightTheme ? \"-night\" : \"\"}`}>\n            {gridArray}\n          </div>\n          <div>\n            <Scoreboard player={opponentPlayer[0]} nightTheme={nightTheme} />\n            <ShowAvatar avatar={opponentAvatar} />\n            <div className=\"bombscore\">\n              <img src={bombImg} width=\"75px\" height=\"75px\" alt=\"bomb\" />\n              <Scoreboard playerScore={opponentPlayer[1]} />\n            </div>\n          </div>\n        </div>\n        <ResultModal\n          score={currentPlayerScore}\n          nightTheme={nightTheme}\n          opponentScore={opponentPlayer[1]}\n          end={end}\n          restart={handleRestartButton}\n        />\n      </>\n    );\n  }\n};\nexport default Game;\n","/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/pages/Avatar.js",[],[],"/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/pages/MainMenu.js",[],[],"/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/pages/Admin.js",[],[],"/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/pages/Leaderboard.js",[],[],"/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/components/Scoreboard.js",[],[],"/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/components/StartModal.js",["136"],[],"import React from \"react\";\nimport { useState, useEffect } from \"react\";\n\nconst StartModal = ({ start, setStart }) => {\n  const modalStyle = {\n    display: \"block\",\n    position: \"fixed\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    backgroundColor: \"#D9D9D9\",\n    padding: \"20px\",\n    zIndex: 1000,\n    textAlign: \"center\",\n    borderRadius: \"10px\",\n  };\n  const [timer, setTimer] = useState(5);\n  useEffect(() => {\n    let countdownInterval;\n    if (start) {\n      countdownInterval = setInterval(() => {\n        if (timer > 0) {\n          setTimer((prevTimer) => prevTimer - 1);\n        } else {\n          clearInterval(countdownInterval);\n          setStart(false);\n        }\n      }, 1000);\n    }\n    return () => {\n      clearInterval(countdownInterval);\n    };\n  }, [timer, start]);\n  if (start) {\n    return (\n      <div>\n        <div class=\"overlay\"></div>\n        <div style={modalStyle}>\n          <h1>Start In: {timer}</h1>\n        </div>\n      </div>\n    );\n  }\n  return <div></div>;\n};\n\nexport default StartModal;\n","/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/components/InputForm.js",[],[],"/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/components/ResultModal.js",[],[],"/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/components/Status.js",[],[],"/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/components/CountdownTimer.js",[],[],"/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/components/AvatarSelection.js",[],[],"/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/components/Loading.js",[],[],"/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/components/Choice.js",[],[],"/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/components/Error.js",[],[],"/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/components/GridBlock.js",[],[],"/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/components/ShowAvatar.js",["137"],[],"import React from \"react\";\nimport avatar1 from \"../assets/avatar1.png\";\nimport avatar2 from \"../assets/avatar2.png\";\nimport avatar3 from \"../assets/avatar3.png\";\nimport avatar4 from \"../assets/avatar4.png\";\nimport avatar5 from \"../assets/avatar5.png\";\nimport avatar6 from \"../assets/avatar6.png\";\nimport avatar7 from \"../assets/avatar7.png\";\nimport avatar8 from \"../assets/avatar8.png\";\n\nconst ShowAvatar = ({avatar}) =>{\n    switch(avatar){\n        case \"avatar1\" : return <img src={avatar1} alt=\"Avatar1\" width='200px' height='200px'></img>\n        case \"avatar2\" : return <img src={avatar2} alt=\"Avatar2\" width='200px' height='200px'></img>\n        case \"avatar3\" : return <img src={avatar3} alt=\"Avatar3\" width='200px' height='200px'></img>\n        case \"avatar4\" : return <img src={avatar4} alt=\"Avatar4\" width='200px' height='200px'></img>\n        case \"avatar5\" : return <img src={avatar5} alt=\"Avatar5\" width='200px' height='200px'></img>\n        case \"avatar6\" : return <img src={avatar6} alt=\"Avatar6\" width='200px' height='200px'></img>\n        case \"avatar7\" : return <img src={avatar7} alt=\"Avatar7\" width='200px' height='200px'></img>\n        case \"avatar8\" : return <img src={avatar8} alt=\"Avatar8\" width='200px' height='200px'></img>\n    }\n\n}\n\nexport default ShowAvatar;","/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/components/Wait.js",[],[],"/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/components/Input.js",[],[],"/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/components/ChoiceButton.js",[],[],"/Users/dune/Documents/CSS Udemy/Netcent/frontend/src/components/BlockElement.js",["138"],[],"import React, { useState, useEffect } from \"react\";\nimport bombImg from \"../assets/bomb.svg\";\nimport crossImg from \"../assets/cross.svg\";\nimport goldenBombImg from \"../assets/goldenBomb.png\";\nimport bombsound from \"../assets/bombsound.mp3\";\n\nconst BlockElement = (props) => {\n  const [bombSound] = useState(new Audio(bombsound));\n  useEffect(() => {\n    if (props.revealed && (props.mine === 1 || props.mine === 2)) {\n      bombSound.volume = 0.2;\n      bombSound.play().catch((error) => {\n        console.error(\"Error playing audio:\", error);\n      });\n    }\n  }, [props.revealed, props.mine]);\n\n  if (props.revealed) {\n    if (props.mine === 1) {\n      return <img src={bombImg} width=\"40px\" height=\"40px\" alt=\"bomb\" />;\n    } else if (props.mine === 2) {\n      return <img src={goldenBombImg} width=\"40px\" height=\"40px\" alt=\"bomb\" />;\n    } else {\n      return <img src={crossImg} alt=\"cross\" width=\"40px\" height=\"40px\" />;\n    }\n  }\n  return <p></p>;\n};\n\nexport default BlockElement;\n",{"ruleId":"139","replacedBy":"140"},{"ruleId":"141","severity":1,"message":"142","line":27,"column":10,"nodeType":"143","messageId":"144","endLine":27,"endColumn":21},{"ruleId":"145","severity":1,"message":"146","line":179,"column":6,"nodeType":"147","endLine":187,"endColumn":4,"suggestions":"148"},{"ruleId":"145","severity":1,"message":"149","line":204,"column":6,"nodeType":"147","endLine":204,"endColumn":68,"suggestions":"150"},{"ruleId":"145","severity":1,"message":"151","line":33,"column":6,"nodeType":"147","endLine":33,"endColumn":20,"suggestions":"152"},{"ruleId":"153","severity":1,"message":"154","line":12,"column":5,"nodeType":"155","messageId":"156","endLine":21,"endColumn":6},{"ruleId":"145","severity":1,"message":"157","line":16,"column":6,"nodeType":"147","endLine":16,"endColumn":34,"suggestions":"158"},"no-new-object",["159"],"no-unused-vars","'firstPlayer' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has an unnecessary dependency: 'socket'. Either exclude it or remove the dependency array. Outer scope values like 'socket' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["160"],"React Hook useEffect has missing dependencies: 'handleRestart', 'handleUpdate', and 'handleWin'. Either include them or remove the dependency array.",["161"],"React Hook useEffect has a missing dependency: 'setStart'. Either include it or remove the dependency array. If 'setStart' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["162"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has a missing dependency: 'bombSound'. Either include it or remove the dependency array.",["163"],"no-object-constructor",{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},"Update the dependencies array to be: [selectedAvatar, opponentAvatar, minefield, waiting, playerIndex, start]",{"range":"172","text":"173"},"Update the dependencies array to be: [statusMessage, end, game, currentPlayerScore, opponentPlayer, handleUpdate, handleWin, handleRestart]",{"range":"174","text":"175"},"Update the dependencies array to be: [timer, start, setStart]",{"range":"176","text":"177"},"Update the dependencies array to be: [props.revealed, props.mine, bombSound]",{"range":"178","text":"179"},[5549,5662],"[selectedAvatar, opponentAvatar, minefield, waiting, playerIndex, start]",[6147,6209],"[statusMessage, end, game, currentPlayerScore, opponentPlayer, handleUpdate, handleWin, handleRestart]",[804,818],"[timer, start, setStart]",[565,593],"[props.revealed, props.mine, bombSound]"]