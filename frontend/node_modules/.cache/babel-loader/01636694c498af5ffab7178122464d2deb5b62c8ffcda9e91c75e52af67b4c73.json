{"ast":null,"code":"var _jsxFileName = \"/Users/win_thanatpong/Desktop/netcent-FindMyMines/frontend/src/pages/Game.js\",\n  _s = $RefreshSig$();\n// import React from \"react\";\n\n// import Wait from \"../components/Wait\";\n// import Status from \"../components/Status\";\n// import GridEasy from \"../components/GridEasy\";\n\n// import io from \"socket.io-client\";\n// import qs from \"qs\";\n// import { Navigate } from \"react-router-dom\";\n\n// const ENDPOINT = \"http://localhost:9000/\";\n//const socket = io(ENDPOINT);\n\n// class Game extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       minefield: null,\n//       grid: null,\n//       playerIndex: null,\n//       firstPlayer: null,\n//       turn: true,\n//       end: false,\n//       room: \"\",\n//       statusMessage: \"\",\n//       currentPlayerScore: 0,\n//       opponentPlayer: [],\n//       selectedAvatar: null,\n//       opponentAvatar: null,\n//       streakBombs: 0,\n//       waiting: false,\n//       joinError: false,\n//     };\n//   }\n\n//   componentDidMount() {\n//     this.socket = io(ENDPOINT);\n//     let { room, name, difficulty, playerIndex, avatar } = qs.parse(\n//       window.location.search,\n//       {\n//         ignoreQueryPrefix: true,\n//       }\n//     );\n//     this.setState({ room });\n//     this.setState({ playerIndex });\n//     if (avatar === \"undefined\") avatar = \"avatar1\";\n//     this.setState({ selectedAvatar: avatar });\n//     this.socket.emit(\"newRoomJoin\", {\n//       room,\n//       name,\n//       difficulty,\n//       avatar,\n//       playerIndex,\n//     });\n//     this.socket.on(\"waiting\", () =>\n//       this.setState({\n//         waiting: true,\n//         currentPlayerScore: 0,\n//         opponentPlayer: [],\n//       })\n//     );\n//     //gameState:revealedCells array, players:[[id1, name1], [id2, name2]], turn,\n//     this.socket.on(\"starting\", ({ minefield, gameState, players, turn, avatars }) => {\n//       this.setState({\n//         minefield: minefield,\n//         waiting: false,\n//         opponentAvatar: avatars[playerIndex === 0 ? 1 : 0],\n//       });\n//       this.gameStart(gameState, players, turn);\n//       console.log(gameState, players, turn, this.state.selectedAvatar ,this.state.opponentAvatar);\n//       console.log(minefield);\n//     });\n//     this.socket.on(\"joinError\", () => this.setState({ joinError: true }));\n//     this.socket.on(\"setFirstPlayer\", ({ firstPlayer }) => {\n//       this.setState({ firstPlayer: firstPlayer });\n//     });\n//     this.socket.on(\"update\", ({ gameState, turn }) =>\n//       this.handleUpdate(gameState, turn)\n//     );\n//     this.socket.on(\"winner\", ({ gameState, turn }) =>\n//       this.handleWin(gameState, turn)\n//     );\n//     this.socket.on(\"restart\", ({ gameState, turn }) =>\n//       this.handleRestart(gameState, turn)\n//     );\n//   }\n\n//   setTurn = (turn) => {\n//     this.setState({ turn: this.state.playerIndex === turn });\n//   };\n\n//   setGame = (gameState) => {\n//     this.setState({ game: gameState });\n//   };\n\n//   setMessage() {\n//     const message = this.state.turn\n//       ? \"Your Turn\"\n//       : `${this.state.opponentPlayer[0]}'s Turn`;\n//     this.setState({ statusMessage: message });\n//   }\n\n//   gameStart = (gameState, players, turn) => {\n//     const opponent = players[this.state.playerIndex === 0 ? 1 : 0][1];\n//     this.setState({ opponentPlayer: [opponent, 0], end: false });\n//     this.setGame(gameState);\n//     this.setTurn(turn);\n//     this.setMessage();\n//   };\n\n//   handleClick = (row, col) => {\n//     const { grid, end, turn, room, playerIndex } = this.state;\n//     if (!grid[row][col] && !end && turn) {\n//       this.socket.emit(\"move\", { room, playerIndex, row, col });\n//     }\n//   };\n\n//   cellClicked = (row, col) => {\n//     if (this.state.turn && !this.state.end) {\n//       this.socket.emit(\"move\", {\n//         room: this.state.room,\n//         player: this.state.playerIndex,\n//         row,\n//         col,\n//       });\n//     }\n//   };\n\n//   handleUpdate = (gameState, turn) => {\n//     this.setGame(gameState);\n//     this.setTurn(turn);\n//     this.setMessage();\n//   };\n\n//   renderGrid = () => {\n//     if (this.state.minefield) {\n//       return(\n//         <GridEasy minefield={this.state.minefield} handleClick={this.handleClick}/>\n//       );\n//     }\n//     return <div></div>;\n//   }\n\n//   render = () => {\n//     if (this.state.joinError) {\n//       return <Navigate to={`/`} />;\n//     } else {\n//       return (\n//         <>\n//           <Wait display={this.state.waiting} room={this.state.room} />\n//           <Status message={this.state.statusMessage} />\n//           <div>\n//             {this.renderGrid()}\n//           </div>\n//         </>\n//       );\n//       // }\n//     }\n//   }\n// }\n// export default Game;\n\nimport React, { useState, useEffect } from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport io from \"socket.io-client\";\nimport qs from \"qs\";\nimport Wait from \"../components/Wait\";\nimport Status from \"../components/Status\";\nimport GridEasy from \"../components/GridEasy\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = \"http://localhost:9000/\";\nconst socket = io.connect(ENDPOINT);\nconst Game = () => {\n  _s();\n  const [minefield, setMinefield] = useState(null);\n  const [game, setGame] = useState(null);\n  const [playerIndex, setPlayerIndex] = useState(null);\n  const [firstPlayer, setFirstPlayer] = useState(null);\n  const [turn, setTurn] = useState(true);\n  const [end, setEnd] = useState(false);\n  const [room, setRoom] = useState(\"\");\n  const [statusMessage, setStatusMessage] = useState(\"\");\n  const [currentPlayerScore, setCurrentPlayerScore] = useState(0);\n  const [opponentPlayer, setOpponentPlayer] = useState([]);\n  const [selectedAvatar, setSelectedAvatar] = useState(null);\n  const [opponentAvatar, setOpponentAvatar] = useState(null);\n  const [streakBombs, setStreakBombs] = useState(0);\n  const [waiting, setWaiting] = useState(false);\n  const [joinError, setJoinError] = useState(false);\n  const handleClick = (row, col) => {\n    if (!game[row][col] && !end && turn) {}\n  };\n  const handleUpdate = (gameState, turn) => {\n    setGame(gameState);\n    setTurn(playerIndex === turn);\n    //setMessage();\n  };\n\n  const renderGrid = () => {\n    if (minefield) {\n      return /*#__PURE__*/_jsxDEV(GridEasy, {\n        minefield: minefield,\n        handleClick: handleClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 14\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 12\n    }, this);\n  };\n  useEffect(() => {\n    let {\n      room,\n      name,\n      difficulty,\n      playerInd,\n      avatar\n    } = qs.parse(window.location.search, {\n      ignoreQueryPrefix: true\n    });\n    playerInd = Number(playerInd);\n    //console.log(room, name, difficulty, playerInd, avatar);\n    if (avatar === \"undefined\") avatar = \"avatar1\";\n    setRoom(room);\n    setPlayerIndex(playerInd);\n    setSelectedAvatar(avatar);\n    socket.emit(\"newRoomJoin\", {\n      room,\n      name,\n      difficulty,\n      avatar,\n      playerInd\n    });\n  }, []);\n\n  // useEffect(() => {\n\n  //   socket.on(\"waiting\", () => setWaiting(true));\n\n  //   socket.on(\n  //     \"starting\",\n  //     ({ minefield, gameState, players, turn, avatars }) => {\n  //       setMinefield(minefield);\n  //       setWaiting(false);\n  //       setOpponentAvatar(avatars[playerIndex === 0 ? 1 : 0]);\n  //       gameStart(gameState, players, turn);\n  //       console.log(`First Play: ${firstPlayer}`);\n  //       console.log(opponentPlayer);\n  //       console.log(statusMessage);\n  //       //console.log(gameState, players, turn, selectedAvatar, opponentAvatar);\n  //     }\n  //   );\n\n  //   socket.on(\"joinError\", () => setJoinError(true));\n\n  //   socket.on(\"setFirstPlayer\", ({ firstPlayer }) => {\n  //     setFirstPlayer(firstPlayer);\n  //   });\n\n  //   socket.on(\"update\", ({ gameState, turn }) =>\n  //     this.handleUpdate(gameState, turn)\n  //   );\n\n  //   socket.on(\"winner\", ({ gameState, turn }) =>\n  //     this.handleWin(gameState, turn)\n  //   );\n\n  //   socket.on(\"restart\", ({ gameState, turn }) =>\n  //     this.handleRestart(gameState, turn)\n  //   );\n\n  //   return () => {\n  //     socket.off(\"waiting\");\n  //     socket.off(\"starting\");\n  //     socket.off(\"joinError\");\n  //     socket.off(\"setFirstPlayer\");\n  //     socket.off(\"update\");\n  //     socket.off(\"winner\");\n  //     socket.off(\"restart\");\n  //   };\n  // }, [statusMessage, turn, end, game, opponentPlayer, waiting]);\n\n  useEffect(() => {\n    socket.on(\"waiting\", () => setWaiting(true));\n    socket.on(\"starting\", ({\n      minefield,\n      gameState,\n      players,\n      turnInd,\n      avatars\n    }) => {\n      setMinefield(minefield);\n      setWaiting(false);\n      setOpponentAvatar(avatars[playerIndex === 0 ? 1 : 0]);\n      //gameStart(gameState, players, turnInd, end);\n      const opponent = players[playerIndex === 0 ? 1 : 0][1];\n      setOpponentPlayer([opponent, 0]);\n      setEnd(false);\n      setGame(gameState);\n      setTurn(playerIndex === turnInd);\n      setStatusMessage(playerIndex === turnInd ? \"Your Turn\" : `${opponent}'s Turn`);\n    });\n    socket.on(\"joinError\", () => setJoinError(true));\n    return () => {\n      socket.off(\"waiting\");\n      socket.off(\"starting\");\n      socket.off(\"joinError\");\n    };\n  }, [socket, opponentAvatar, minefield, waiting, statusMessage]);\n  useEffect(() => {\n    socket.on(\"update\", ({\n      gameState,\n      turn\n    }) => this.handleUpdate(gameState, turn));\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Wait, {\n      display: waiting,\n      room: room\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Status, {\n      message: statusMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: renderGrid()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Game, \"Ny9RVY+Gbmo0tvn72avJU6HkV/A=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","Navigate","io","qs","Wait","Status","GridEasy","jsxDEV","_jsxDEV","Fragment","_Fragment","ENDPOINT","socket","connect","Game","_s","minefield","setMinefield","game","setGame","playerIndex","setPlayerIndex","firstPlayer","setFirstPlayer","turn","setTurn","end","setEnd","room","setRoom","statusMessage","setStatusMessage","currentPlayerScore","setCurrentPlayerScore","opponentPlayer","setOpponentPlayer","selectedAvatar","setSelectedAvatar","opponentAvatar","setOpponentAvatar","streakBombs","setStreakBombs","waiting","setWaiting","joinError","setJoinError","handleClick","row","col","handleUpdate","gameState","renderGrid","fileName","_jsxFileName","lineNumber","columnNumber","name","difficulty","playerInd","avatar","parse","window","location","search","ignoreQueryPrefix","Number","emit","on","players","turnInd","avatars","opponent","off","children","display","message","onClick","_c","$RefreshReg$"],"sources":["/Users/win_thanatpong/Desktop/netcent-FindMyMines/frontend/src/pages/Game.js"],"sourcesContent":["// import React from \"react\";\n\n// import Wait from \"../components/Wait\";\n// import Status from \"../components/Status\";\n// import GridEasy from \"../components/GridEasy\";\n\n// import io from \"socket.io-client\";\n// import qs from \"qs\";\n// import { Navigate } from \"react-router-dom\";\n\n// const ENDPOINT = \"http://localhost:9000/\";\n//const socket = io(ENDPOINT);\n\n// class Game extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       minefield: null,\n//       grid: null,\n//       playerIndex: null,\n//       firstPlayer: null,\n//       turn: true,\n//       end: false,\n//       room: \"\",\n//       statusMessage: \"\",\n//       currentPlayerScore: 0,\n//       opponentPlayer: [],\n//       selectedAvatar: null,\n//       opponentAvatar: null,\n//       streakBombs: 0,\n//       waiting: false,\n//       joinError: false,\n//     };\n//   }\n\n//   componentDidMount() {\n//     this.socket = io(ENDPOINT);\n//     let { room, name, difficulty, playerIndex, avatar } = qs.parse(\n//       window.location.search,\n//       {\n//         ignoreQueryPrefix: true,\n//       }\n//     );\n//     this.setState({ room });\n//     this.setState({ playerIndex });\n//     if (avatar === \"undefined\") avatar = \"avatar1\";\n//     this.setState({ selectedAvatar: avatar });\n//     this.socket.emit(\"newRoomJoin\", {\n//       room,\n//       name,\n//       difficulty,\n//       avatar,\n//       playerIndex,\n//     });\n//     this.socket.on(\"waiting\", () =>\n//       this.setState({\n//         waiting: true,\n//         currentPlayerScore: 0,\n//         opponentPlayer: [],\n//       })\n//     );\n//     //gameState:revealedCells array, players:[[id1, name1], [id2, name2]], turn,\n//     this.socket.on(\"starting\", ({ minefield, gameState, players, turn, avatars }) => {\n//       this.setState({\n//         minefield: minefield,\n//         waiting: false,\n//         opponentAvatar: avatars[playerIndex === 0 ? 1 : 0],\n//       });\n//       this.gameStart(gameState, players, turn);\n//       console.log(gameState, players, turn, this.state.selectedAvatar ,this.state.opponentAvatar);\n//       console.log(minefield);\n//     });\n//     this.socket.on(\"joinError\", () => this.setState({ joinError: true }));\n//     this.socket.on(\"setFirstPlayer\", ({ firstPlayer }) => {\n//       this.setState({ firstPlayer: firstPlayer });\n//     });\n//     this.socket.on(\"update\", ({ gameState, turn }) =>\n//       this.handleUpdate(gameState, turn)\n//     );\n//     this.socket.on(\"winner\", ({ gameState, turn }) =>\n//       this.handleWin(gameState, turn)\n//     );\n//     this.socket.on(\"restart\", ({ gameState, turn }) =>\n//       this.handleRestart(gameState, turn)\n//     );\n//   }\n\n//   setTurn = (turn) => {\n//     this.setState({ turn: this.state.playerIndex === turn });\n//   };\n\n//   setGame = (gameState) => {\n//     this.setState({ game: gameState });\n//   };\n\n//   setMessage() {\n//     const message = this.state.turn\n//       ? \"Your Turn\"\n//       : `${this.state.opponentPlayer[0]}'s Turn`;\n//     this.setState({ statusMessage: message });\n//   }\n\n//   gameStart = (gameState, players, turn) => {\n//     const opponent = players[this.state.playerIndex === 0 ? 1 : 0][1];\n//     this.setState({ opponentPlayer: [opponent, 0], end: false });\n//     this.setGame(gameState);\n//     this.setTurn(turn);\n//     this.setMessage();\n//   };\n\n//   handleClick = (row, col) => {\n//     const { grid, end, turn, room, playerIndex } = this.state;\n//     if (!grid[row][col] && !end && turn) {\n//       this.socket.emit(\"move\", { room, playerIndex, row, col });\n//     }\n//   };\n\n//   cellClicked = (row, col) => {\n//     if (this.state.turn && !this.state.end) {\n//       this.socket.emit(\"move\", {\n//         room: this.state.room,\n//         player: this.state.playerIndex,\n//         row,\n//         col,\n//       });\n//     }\n//   };\n\n//   handleUpdate = (gameState, turn) => {\n//     this.setGame(gameState);\n//     this.setTurn(turn);\n//     this.setMessage();\n//   };\n\n//   renderGrid = () => {\n//     if (this.state.minefield) {\n//       return(\n//         <GridEasy minefield={this.state.minefield} handleClick={this.handleClick}/>\n//       );\n//     }\n//     return <div></div>;\n//   }\n\n//   render = () => {\n//     if (this.state.joinError) {\n//       return <Navigate to={`/`} />;\n//     } else {\n//       return (\n//         <>\n//           <Wait display={this.state.waiting} room={this.state.room} />\n//           <Status message={this.state.statusMessage} />\n//           <div>\n//             {this.renderGrid()}\n//           </div>\n//         </>\n//       );\n//       // }\n//     }\n//   }\n// }\n// export default Game;\n\nimport React, { useState, useEffect } from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport io from \"socket.io-client\";\nimport qs from \"qs\";\n\nimport Wait from \"../components/Wait\";\nimport Status from \"../components/Status\";\nimport GridEasy from \"../components/GridEasy\";\n\nconst ENDPOINT = \"http://localhost:9000/\";\nconst socket = io.connect(ENDPOINT);\n\nconst Game = () => {\n  const [minefield, setMinefield] = useState(null);\n  const [game, setGame] = useState(null);\n  const [playerIndex, setPlayerIndex] = useState(null);\n  const [firstPlayer, setFirstPlayer] = useState(null);\n  const [turn, setTurn] = useState(true);\n  const [end, setEnd] = useState(false);\n  const [room, setRoom] = useState(\"\");\n  const [statusMessage, setStatusMessage] = useState(\"\");\n  const [currentPlayerScore, setCurrentPlayerScore] = useState(0);\n  const [opponentPlayer, setOpponentPlayer] = useState([]);\n  const [selectedAvatar, setSelectedAvatar] = useState(null);\n  const [opponentAvatar, setOpponentAvatar] = useState(null);\n  const [streakBombs, setStreakBombs] = useState(0);\n  const [waiting, setWaiting] = useState(false);\n  const [joinError, setJoinError] = useState(false);\n\n  const handleClick = (row, col) => {\n    if (!game[row][col] && !end && turn) {\n    }\n  };\n\n  const handleUpdate = (gameState, turn) => {\n    setGame(gameState);\n    setTurn(playerIndex === turn);\n    //setMessage();\n  };\n\n  const renderGrid = () => {\n    if (minefield) {\n      return <GridEasy minefield={minefield} handleClick={handleClick} />;\n    }\n    return <div></div>;\n  };\n\n  useEffect(() => {\n    let { room, name, difficulty, playerInd, avatar } = qs.parse(\n      window.location.search,\n      {\n        ignoreQueryPrefix: true,\n      }\n    );\n    playerInd = Number(playerInd);\n    //console.log(room, name, difficulty, playerInd, avatar);\n    if (avatar === \"undefined\") avatar = \"avatar1\";\n    setRoom(room);\n    setPlayerIndex(playerInd);\n    setSelectedAvatar(avatar);\n    socket.emit(\"newRoomJoin\", {\n      room,\n      name,\n      difficulty,\n      avatar,\n      playerInd,\n    });\n  }, []);\n\n  // useEffect(() => {\n\n  //   socket.on(\"waiting\", () => setWaiting(true));\n\n  //   socket.on(\n  //     \"starting\",\n  //     ({ minefield, gameState, players, turn, avatars }) => {\n  //       setMinefield(minefield);\n  //       setWaiting(false);\n  //       setOpponentAvatar(avatars[playerIndex === 0 ? 1 : 0]);\n  //       gameStart(gameState, players, turn);\n  //       console.log(`First Play: ${firstPlayer}`);\n  //       console.log(opponentPlayer);\n  //       console.log(statusMessage);\n  //       //console.log(gameState, players, turn, selectedAvatar, opponentAvatar);\n  //     }\n  //   );\n\n  //   socket.on(\"joinError\", () => setJoinError(true));\n\n  //   socket.on(\"setFirstPlayer\", ({ firstPlayer }) => {\n  //     setFirstPlayer(firstPlayer);\n  //   });\n\n  //   socket.on(\"update\", ({ gameState, turn }) =>\n  //     this.handleUpdate(gameState, turn)\n  //   );\n\n  //   socket.on(\"winner\", ({ gameState, turn }) =>\n  //     this.handleWin(gameState, turn)\n  //   );\n\n  //   socket.on(\"restart\", ({ gameState, turn }) =>\n  //     this.handleRestart(gameState, turn)\n  //   );\n\n  //   return () => {\n  //     socket.off(\"waiting\");\n  //     socket.off(\"starting\");\n  //     socket.off(\"joinError\");\n  //     socket.off(\"setFirstPlayer\");\n  //     socket.off(\"update\");\n  //     socket.off(\"winner\");\n  //     socket.off(\"restart\");\n  //   };\n  // }, [statusMessage, turn, end, game, opponentPlayer, waiting]);\n\n  useEffect(() => {\n    socket.on(\"waiting\", () => setWaiting(true));\n\n    socket.on(\n      \"starting\",\n      ({ minefield, gameState, players, turnInd, avatars }) => {\n        setMinefield(minefield);\n        setWaiting(false);\n        setOpponentAvatar(avatars[playerIndex === 0 ? 1 : 0]);\n        //gameStart(gameState, players, turnInd, end);\n        const opponent = players[playerIndex === 0 ? 1 : 0][1];\n        setOpponentPlayer([opponent, 0]);\n        setEnd(false);\n        setGame(gameState);\n        setTurn(playerIndex === turnInd);\n        setStatusMessage(playerIndex === turnInd ? \"Your Turn\" : `${opponent}'s Turn`);\n      }\n    );\n\n    socket.on(\"joinError\", () => setJoinError(true));\n\n    return () => {\n      socket.off(\"waiting\");\n      socket.off(\"starting\");\n      socket.off(\"joinError\");\n    };\n  }, [socket, opponentAvatar, minefield, waiting, statusMessage]);\n\n  useEffect(() => {\n    socket.on(\"update\", ({ gameState, turn }) =>\n       this.handleUpdate(gameState, turn)\n     );\n  })\n\n  return (\n    <>\n      <Wait display={waiting} room={room} />\n      <Status message={statusMessage} />\n      <div>{renderGrid()}</div>\n      <button onClick={handleClick}/>\n    </>\n  );\n};\n\nexport default Game;\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,OAAOC,EAAE,MAAM,kBAAkB;AACjC,OAAOC,EAAE,MAAM,IAAI;AAEnB,OAAOC,IAAI,MAAM,oBAAoB;AACrC,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,QAAQ,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE9C,MAAMC,QAAQ,GAAG,wBAAwB;AACzC,MAAMC,MAAM,GAAGV,EAAE,CAACW,OAAO,CAACF,QAAQ,CAAC;AAEnC,MAAMG,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGlB,Q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"},"metadata":{},"sourceType":"module","externalDependencies":[]}