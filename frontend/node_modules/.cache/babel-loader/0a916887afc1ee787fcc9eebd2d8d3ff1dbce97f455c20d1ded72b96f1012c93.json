{"ast":null,"code":"var _jsxFileName = \"/Users/win_thanatpong/Desktop/netcent-FindMyMines/frontend/src/pages/MainMenu.js\",\n  _s = $RefreshSig$();\n// import React, { Component } from \"react\";\n// import { Navigate, Link, useLocation } from \"react-router-dom\";\n\n// import InputForm from \"../components/InputForm\";\n// import Choice from \"../components/Choice\";\n// import Loading from \"../components/Loading\";\n// import Error from \"../components/Error\";\n\n// import qs from \"qs\";\n// import io from \"socket.io-client\";\n// const ENDPOINT = \"http://localhost:9000/\";\n\n// class MainMenu extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       step: 1,\n//       name: \"\",\n//       newGame: null,\n//       room: \"\",\n//       difficulty: \"\",\n//       playerIndex: 0,\n//       selectedAvatar: \"\",\n//       loading: false,\n//       serverConfirmed: false,\n//       error: false,\n//       errorMessage: \"\",\n//     };\n//   }\n\n//   componentDidMount = () => {\n//     const { selectedAvatar } = qs.parse(\n//       window.location.search,\n//       {\n//         ignoreQueryPrefix: true,\n//       }\n//     );\n//     this.setState({ selectedAvatar });\n//     this.socket = io(ENDPOINT);\n//     this.socket.on(\"newGameCreated\", ({ room, difficulty }) => {\n//       this.setState({ serverConfirmed: true, room: room });\n//     });\n//     this.socket.on(\"joinConfirmed\", ({ difficulty }) => {\n//       this.setState({\n//         serverConfirmed: true,\n//         difficulty: difficulty,\n//         playerIndex: 1,\n//       });\n//     });\n//     this.socket.on(\"errorMessage\", (message) => this.displayError(message));\n//   };\n\n//   componentWillUnmount() {\n//     this.socket.disconnect();\n//   }\n\n//   onChoice = (choice) => {\n//     const gameChoice = choice === \"new\" ? true : false;\n//     const newState = { newGame: gameChoice };\n//     this.setState(newState, () => {\n//       this.stepForward();\n//     });\n//   };\n\n//   validateNew = () => {\n//     if (this.state.newGame) {\n//       return !(this.state.name === \"\" || this.state.difficulty === \"\");\n//     } else {\n//       return (\n//         !(this.state.name === \"\") &&\n//         !(this.state.room === \"\") &&\n//         !(this.state.difficulty === \"\")\n//       );\n//     }\n//   };\n\n//   validateJoin = () => {\n//     if (this.state.newGame) {\n//       return !(this.state.name === \"\");\n//     } else {\n//       return !(this.state.name === \"\") && !(this.state.room === \"\");\n//     }\n//   };\n\n//   onSubmit = () => {\n//     this.setState({ loading: true });\n//     if (this.state.newGame && this.validateNew()) {\n//       this.socket.emit(\"newGame\", { difficulty: this.state.difficulty });\n//     } else if (this.state.newGame === false && this.validateJoin()) {\n//       console.log(this.state.room);\n//       this.socket.emit(\"joining\", { room: this.state.room });\n//     } else {\n//       setTimeout(() => this.setState({ loading: false }), 500);\n//       this.displayError(\n//         this.state.newGame\n//           ? \"Please fill out your name and select difficulty\"\n//           : \"Please fill out your name, room id, and select difficulty\"\n//       );\n//     }\n//   };\n\n//   setDifficulty = (diff) => {\n//     this.setState({ difficulty: diff });\n//   };\n\n//   stepBack = () => {\n//     this.setState({ step: this.state.step - 1 });\n//   };\n\n//   stepForward = () => {\n//     this.setState({ step: this.state.step + 1 });\n//   };\n\n//   onTyping = (e) => {\n//     const target = e.target.name;\n//     const value = e.target.value;\n//     const newState = { [target]: value };\n//     this.setState(newState);\n//   };\n\n//   displayError = (message) => {\n//     this.setState({ error: true, errorMessage: message, loading: false });\n//     setTimeout(() => {\n//       this.setState({ error: false, errorMessage: \"\" });\n//     }, 3000);\n//   };\n\n//   render() {\n//     if (this.state.serverConfirmed) {\n//       return (\n//         <Navigate\n//           to={`/game?room=${this.state.room}&name=${this.state.name}&difficulty=${this.state.difficulty}&playerIndex=${this.state.playerIndex}&avatar=${this.state.selectedAvatar}`}\n//         />\n//       );\n//     } else {\n//       switch (this.state.step) {\n//         case 1:\n//           return (\n//             <>\n//               <Choice onChoice={this.onChoice} />\n//               <Link to=\"/leaderboard\">\n//                 <button\n//                   className=\"btn btn-primary btn-lg btn-block\"\n//                   id=\"leaderboard-btn\"\n//                 >\n//                   LEADERBOARD\n//                 </button>\n//               </Link>\n//               <Link to=\"/avatar\">\n//                 <button\n//                   className=\"btn btn-primary btn-lg btn-block\"\n//                   id=\"avatar-btn\"\n//                 >\n//                   AVATAR\n//                 </button>\n//               </Link>\n//             </>\n//           );\n//         case 2:\n//           return (\n//             <>\n//               <Loading loading={this.state.loading} />\n//               <Error\n//                 display={this.state.error}\n//                 message={this.state.errorMessage}\n//               />\n//               <InputForm\n//                 stepBack={this.stepBack}\n//                 onSubmit={this.onSubmit}\n//                 onTyping={this.onTyping.bind(this)}\n//                 newGame={this.state.newGame}\n//                 name={this.state.name}\n//                 setDifficulty={this.setDifficulty}\n//                 room={this.state.room}\n//               />\n//             </>\n//           );\n//         default:\n//           return null;\n//       }\n//     }\n//   }\n// }\n\n// export default MainMenu;\n\nimport React, { useState, useEffect } from \"react\";\nimport { Navigate, Link } from \"react-router-dom\";\nimport InputForm from \"../components/InputForm\";\nimport Choice from \"../components/Choice\";\nimport Loading from \"../components/Loading\";\nimport Error from \"../components/Error\";\nimport qs from \"qs\";\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = \"http://localhost:9000/\";\nconst MainMenu = () => {\n  _s();\n  const [state, setState] = useState({\n    step: 1,\n    name: \"\",\n    newGame: null,\n    room: \"\",\n    difficulty: \"\",\n    playerIndex: 0,\n    selectedAvatar: \"\",\n    loading: false,\n    serverConfirmed: false,\n    error: false,\n    errorMessage: \"\"\n  });\n  const socket = io(ENDPOINT);\n  useEffect(() => {\n    const {\n      selectedAvatar\n    } = qs.parse(window.location.search, {\n      ignoreQueryPrefix: true\n    });\n    setState(prevState => ({\n      ...prevState,\n      selectedAvatar\n    }));\n    socket.on(\"newGameCreated\", ({\n      room,\n      difficulty\n    }) => {\n      setState(prevState => ({\n        ...prevState,\n        serverConfirmed: true,\n        room\n      }));\n    });\n    socket.on(\"joinConfirmed\", ({\n      difficulty\n    }) => {\n      setState(prevState => ({\n        ...prevState,\n        serverConfirmed: true,\n        difficulty,\n        playerIndex: 1\n      }));\n    });\n    socket.on(\"errorMessage\", message => displayError(message));\n    return () => {\n      socket.disconnect();\n    };\n  }, []); // Empty array means this effect runs once after the initial render\n\n  const onChoice = choice => {\n    const gameChoice = choice === \"new\";\n    setState(prevState => ({\n      ...prevState,\n      newGame: gameChoice\n    }), () => {\n      stepForward();\n    });\n  };\n  const validateNew = () => {\n    if (state.newGame) {\n      return !(state.name === \"\" || state.difficulty === \"\");\n    } else {\n      return !(state.name === \"\") && !(state.room === \"\") && !(state.difficulty === \"\");\n    }\n  };\n  const validateJoin = () => {\n    if (state.newGame) {\n      return !(state.name === \"\");\n    } else {\n      return !(state.name === \"\") && !(state.room === \"\");\n    }\n  };\n  const onSubmit = () => {\n    setState(prevState => ({\n      ...prevState,\n      loading: true\n    }));\n    if (state.newGame && validateNew()) {\n      socket.emit(\"newGame\", {\n        difficulty: state.difficulty\n      });\n    } else if (!state.newGame && validateJoin()) {\n      socket.emit(\"joining\", {\n        room: state.room\n      });\n    } else {\n      setTimeout(() => setState(prevState => ({\n        ...prevState,\n        loading: false\n      })), 500);\n      displayError(state.newGame ? \"Please fill out your name and select difficulty\" : \"Please fill out your name, room id, and select difficulty\");\n    }\n  };\n  const setDifficulty = diff => {\n    setState(prevState => ({\n      ...prevState,\n      difficulty: diff\n    }));\n  };\n  const stepBack = () => {\n    setState(prevState => ({\n      ...prevState,\n      step: prevState.step - 1\n    }));\n  };\n  const stepForward = () => {\n    setState(prevState => ({\n      ...prevState,\n      step: prevState.step + 1\n    }));\n  };\n  const onTyping = e => {\n    const target = e.target.name;\n    const value = e.target.value;\n    setState(prevState => ({\n      ...prevState,\n      [target]: value\n    }));\n  };\n  const displayError = message => {\n    setState(prevState => ({\n      ...prevState,\n      error: true,\n      errorMessage: message,\n      loading: false\n    }));\n    setTimeout(() => {\n      setState(prevState => ({\n        ...prevState,\n        error: false,\n        errorMessage: \"\"\n      }));\n    }, 3000);\n  };\n  if (state.serverConfirmed) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: `/game?room=${state.room}&name=${state.name}&difficulty=${state.difficulty}&playerIndex=${state.playerIndex}&avatar=${state.selectedAvatar}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }, this);\n  } else {\n    switch (state.step) {\n      case 1:\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Choice, {\n            onChoice: onChoice\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/leaderboard\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-primary btn-lg btn-block\",\n              id: \"leaderboard-btn\",\n              children: \"LEADERBOARD\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 316,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Link, {\n            to: \"/avatar\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-primary btn-lg btn-block\",\n              id: \"avatar-btn\",\n              children: \"AVATAR\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true);\n      case 2:\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Loading, {\n            loading: state.loading\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Error, {\n            display: state.error,\n            message: state.errorMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(InputForm, {\n            stepBack: stepBack,\n            onSubmit: onSubmit,\n            onTyping: onTyping,\n            newGame: state.newGame,\n            name: state.name,\n            setDifficulty: setDifficulty,\n            room: state.room\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true);\n      default:\n        return null;\n    }\n  }\n};\n_s(MainMenu, \"3jwa2XLQNUuHx7txCv/sS4dxVpg=\");\n_c = MainMenu;\nexport default MainMenu;\nvar _c;\n$RefreshReg$(_c, \"MainMenu\");","map":{"version":3,"names":["React","useState","useEffect","Navigate","Link","InputForm","Choice","Loading","Error","qs","io","jsxDEV","_jsxDEV","Fragment","_Fragment","ENDPOINT","MainMenu","_s","state","setState","step","name","newGame","room","difficulty","playerIndex","selectedAvatar","loading","serverConfirmed","error","errorMessage","socket","parse","window","location","search","ignoreQueryPrefix","prevState","on","message","displayError","disconnect","onChoice","choice","gameChoice","stepForward","validateNew","validateJoin","onSubmit","emit","setTimeout","setDifficulty","diff","stepBack","onTyping","e","target","value","to","fileName","_jsxFileName","lineNumber","columnNumber","children","className","id","display","_c","$RefreshReg$"],"sources":["/Users/win_thanatpong/Desktop/netcent-FindMyMines/frontend/src/pages/MainMenu.js"],"sourcesContent":["// import React, { Component } from \"react\";\n// import { Navigate, Link, useLocation } from \"react-router-dom\";\n\n// import InputForm from \"../components/InputForm\";\n// import Choice from \"../components/Choice\";\n// import Loading from \"../components/Loading\";\n// import Error from \"../components/Error\";\n\n// import qs from \"qs\";\n// import io from \"socket.io-client\";\n// const ENDPOINT = \"http://localhost:9000/\";\n\n// class MainMenu extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       step: 1,\n//       name: \"\",\n//       newGame: null,\n//       room: \"\",\n//       difficulty: \"\",\n//       playerIndex: 0,\n//       selectedAvatar: \"\",\n//       loading: false,\n//       serverConfirmed: false,\n//       error: false,\n//       errorMessage: \"\",\n//     };\n//   }\n\n//   componentDidMount = () => {\n//     const { selectedAvatar } = qs.parse(\n//       window.location.search,\n//       {\n//         ignoreQueryPrefix: true,\n//       }\n//     );\n//     this.setState({ selectedAvatar });\n//     this.socket = io(ENDPOINT);\n//     this.socket.on(\"newGameCreated\", ({ room, difficulty }) => {\n//       this.setState({ serverConfirmed: true, room: room });\n//     });\n//     this.socket.on(\"joinConfirmed\", ({ difficulty }) => {\n//       this.setState({\n//         serverConfirmed: true,\n//         difficulty: difficulty,\n//         playerIndex: 1,\n//       });\n//     });\n//     this.socket.on(\"errorMessage\", (message) => this.displayError(message));\n//   };\n\n//   componentWillUnmount() {\n//     this.socket.disconnect();\n//   }\n\n//   onChoice = (choice) => {\n//     const gameChoice = choice === \"new\" ? true : false;\n//     const newState = { newGame: gameChoice };\n//     this.setState(newState, () => {\n//       this.stepForward();\n//     });\n//   };\n\n//   validateNew = () => {\n//     if (this.state.newGame) {\n//       return !(this.state.name === \"\" || this.state.difficulty === \"\");\n//     } else {\n//       return (\n//         !(this.state.name === \"\") &&\n//         !(this.state.room === \"\") &&\n//         !(this.state.difficulty === \"\")\n//       );\n//     }\n//   };\n\n//   validateJoin = () => {\n//     if (this.state.newGame) {\n//       return !(this.state.name === \"\");\n//     } else {\n//       return !(this.state.name === \"\") && !(this.state.room === \"\");\n//     }\n//   };\n\n//   onSubmit = () => {\n//     this.setState({ loading: true });\n//     if (this.state.newGame && this.validateNew()) {\n//       this.socket.emit(\"newGame\", { difficulty: this.state.difficulty });\n//     } else if (this.state.newGame === false && this.validateJoin()) {\n//       console.log(this.state.room);\n//       this.socket.emit(\"joining\", { room: this.state.room });\n//     } else {\n//       setTimeout(() => this.setState({ loading: false }), 500);\n//       this.displayError(\n//         this.state.newGame\n//           ? \"Please fill out your name and select difficulty\"\n//           : \"Please fill out your name, room id, and select difficulty\"\n//       );\n//     }\n//   };\n\n//   setDifficulty = (diff) => {\n//     this.setState({ difficulty: diff });\n//   };\n\n//   stepBack = () => {\n//     this.setState({ step: this.state.step - 1 });\n//   };\n\n//   stepForward = () => {\n//     this.setState({ step: this.state.step + 1 });\n//   };\n\n//   onTyping = (e) => {\n//     const target = e.target.name;\n//     const value = e.target.value;\n//     const newState = { [target]: value };\n//     this.setState(newState);\n//   };\n\n//   displayError = (message) => {\n//     this.setState({ error: true, errorMessage: message, loading: false });\n//     setTimeout(() => {\n//       this.setState({ error: false, errorMessage: \"\" });\n//     }, 3000);\n//   };\n\n//   render() {\n//     if (this.state.serverConfirmed) {\n//       return (\n//         <Navigate\n//           to={`/game?room=${this.state.room}&name=${this.state.name}&difficulty=${this.state.difficulty}&playerIndex=${this.state.playerIndex}&avatar=${this.state.selectedAvatar}`}\n//         />\n//       );\n//     } else {\n//       switch (this.state.step) {\n//         case 1:\n//           return (\n//             <>\n//               <Choice onChoice={this.onChoice} />\n//               <Link to=\"/leaderboard\">\n//                 <button\n//                   className=\"btn btn-primary btn-lg btn-block\"\n//                   id=\"leaderboard-btn\"\n//                 >\n//                   LEADERBOARD\n//                 </button>\n//               </Link>\n//               <Link to=\"/avatar\">\n//                 <button\n//                   className=\"btn btn-primary btn-lg btn-block\"\n//                   id=\"avatar-btn\"\n//                 >\n//                   AVATAR\n//                 </button>\n//               </Link>\n//             </>\n//           );\n//         case 2:\n//           return (\n//             <>\n//               <Loading loading={this.state.loading} />\n//               <Error\n//                 display={this.state.error}\n//                 message={this.state.errorMessage}\n//               />\n//               <InputForm\n//                 stepBack={this.stepBack}\n//                 onSubmit={this.onSubmit}\n//                 onTyping={this.onTyping.bind(this)}\n//                 newGame={this.state.newGame}\n//                 name={this.state.name}\n//                 setDifficulty={this.setDifficulty}\n//                 room={this.state.room}\n//               />\n//             </>\n//           );\n//         default:\n//           return null;\n//       }\n//     }\n//   }\n// }\n\n// export default MainMenu;\n\nimport React, { useState, useEffect } from \"react\";\nimport { Navigate, Link } from \"react-router-dom\";\nimport InputForm from \"../components/InputForm\";\nimport Choice from \"../components/Choice\";\nimport Loading from \"../components/Loading\";\nimport Error from \"../components/Error\";\nimport qs from \"qs\";\nimport io from \"socket.io-client\";\n\nconst ENDPOINT = \"http://localhost:9000/\";\n\nconst MainMenu = () => {\n  const [state, setState] = useState({\n    step: 1,\n    name: \"\",\n    newGame: null,\n    room: \"\",\n    difficulty: \"\",\n    playerIndex: 0,\n    selectedAvatar: \"\",\n    loading: false,\n    serverConfirmed: false,\n    error: false,\n    errorMessage: \"\",\n  });\n\n  const socket = io(ENDPOINT);\n\n  useEffect(() => {\n    const { selectedAvatar } = qs.parse(\n      window.location.search,\n      {\n        ignoreQueryPrefix: true,\n      }\n    );\n    setState(prevState => ({ ...prevState, selectedAvatar }));\n\n    socket.on(\"newGameCreated\", ({ room, difficulty }) => {\n      setState(prevState => ({ ...prevState, serverConfirmed: true, room }));\n    });\n\n    socket.on(\"joinConfirmed\", ({ difficulty }) => {\n      setState(prevState => ({ ...prevState, serverConfirmed: true, difficulty, playerIndex: 1 }));\n    });\n\n    socket.on(\"errorMessage\", (message) => displayError(message));\n\n    return () => {\n      socket.disconnect();\n    };\n  }, []); // Empty array means this effect runs once after the initial render\n\n  const onChoice = (choice) => {\n    const gameChoice = choice === \"new\";\n    setState(prevState => ({ ...prevState, newGame: gameChoice }), () => {\n      stepForward();\n    });\n  };\n\n  const validateNew = () => {\n    if (state.newGame) {\n      return !(state.name === \"\" || state.difficulty === \"\");\n    } else {\n      return !(state.name === \"\") && !(state.room === \"\") && !(state.difficulty === \"\");\n    }\n  };\n\n  const validateJoin = () => {\n    if (state.newGame) {\n      return !(state.name === \"\");\n    } else {\n      return !(state.name === \"\") && !(state.room === \"\");\n    }\n  };\n\n  const onSubmit = () => {\n    setState(prevState => ({ ...prevState, loading: true }));\n    if (state.newGame && validateNew()) {\n      socket.emit(\"newGame\", { difficulty: state.difficulty });\n    } else if (!state.newGame && validateJoin()) {\n      socket.emit(\"joining\", { room: state.room });\n    } else {\n      setTimeout(() => setState(prevState => ({ ...prevState, loading: false })), 500);\n      displayError(\n        state.newGame\n          ? \"Please fill out your name and select difficulty\"\n          : \"Please fill out your name, room id, and select difficulty\"\n      );\n    }\n  };\n\n  const setDifficulty = (diff) => {\n    setState(prevState => ({ ...prevState, difficulty: diff }));\n  };\n\n  const stepBack = () => {\n    setState(prevState => ({ ...prevState, step: prevState.step - 1 }));\n  };\n\n  const stepForward = () => {\n    setState(prevState => ({ ...prevState, step: prevState.step + 1 }));\n  };\n\n  const onTyping = (e) => {\n    const target = e.target.name;\n    const value = e.target.value;\n    setState(prevState => ({ ...prevState, [target]: value }));\n  };\n\n  const displayError = (message) => {\n    setState(prevState => ({ ...prevState, error: true, errorMessage: message, loading: false }));\n    setTimeout(() => {\n      setState(prevState => ({ ...prevState, error: false, errorMessage: \"\" }));\n    }, 3000);\n  };\n\n  if (state.serverConfirmed) {\n    return (\n      <Navigate\n        to={`/game?room=${state.room}&name=${state.name}&difficulty=${state.difficulty}&playerIndex=${state.playerIndex}&avatar=${state.selectedAvatar}`}\n      />\n    );\n  } else {\n    switch (state.step) {\n      case 1:\n        return (\n          <>\n            <Choice onChoice={onChoice} />\n            <Link to=\"/leaderboard\">\n              <button className=\"btn btn-primary btn-lg btn-block\" id=\"leaderboard-btn\">\n                LEADERBOARD\n              </button>\n            </Link>\n            <Link to=\"/avatar\">\n              <button className=\"btn btn-primary btn-lg btn-block\" id=\"avatar-btn\">\n                AVATAR\n              </button>\n            </Link>\n          </>\n        );\n      case 2:\n        return (\n          <>\n            <Loading loading={state.loading} />\n            <Error display={state.error} message={state.errorMessage} />\n            <InputForm\n              stepBack={stepBack}\n              onSubmit={onSubmit}\n              onTyping={onTyping}\n              newGame={state.newGame}\n              name={state.name}\n              setDifficulty={setDifficulty}\n              room={state.room}\n            />\n          </>\n        );\n      default:\n        return null;\n    }\n  }\n};\n\nexport default MainMenu;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,QAAQ,EAAEC,IAAI,QAAQ,kBAAkB;AACjD,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,OAAOC,KAAK,MAAM,qBAAqB;AACvC,OAAOC,EAAE,MAAM,IAAI;AACnB,OAAOC,EAAE,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElC,MAAMC,QAAQ,GAAG,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"},"metadata":{},"sourceType":"module","externalDependencies":[]}