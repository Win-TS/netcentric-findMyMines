{"ast":null,"code":"var _jsxFileName = \"/Users/win_thanatpong/Desktop/netcent-FindMyMines/frontend/src/pages/Game.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport io from \"socket.io-client\";\nimport qs from \"qs\";\nimport Wait from \"../components/Wait\";\nimport Status from \"../components/Status\";\nimport GridEasy from \"../components/GridEasy\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = \"http://localhost:9000/\";\nconst Game = () => {\n  _s();\n  const [state, setState] = useState({\n    minefield: null,\n    grid: null,\n    playerIndex: null,\n    firstPlayer: null,\n    turn: true,\n    end: false,\n    room: \"\",\n    statusMessage: \"\",\n    currentPlayerScore: 0,\n    opponentPlayer: [],\n    selectedAvatar: null,\n    opponentAvatar: null,\n    streakBombs: 0,\n    waiting: false,\n    joinError: false\n  });\n  const [socket, setSocket] = useState(null);\n  const navigate = useNavigate();\n  useEffect(() => {\n    const socketInstance = io(ENDPOINT);\n    setSocket(socketInstance);\n    let {\n      room,\n      name,\n      difficulty,\n      playerIndex,\n      avatar\n    } = qs.parse(window.location.search, {\n      ignoreQueryPrefix: true\n    });\n    setState(prevState => ({\n      ...prevState,\n      room,\n      playerIndex,\n      avatar: avatar === \"undefined\" ? \"avatar1\" : avatar\n    }));\n    socketInstance.emit(\"newRoomJoin\", {\n      room,\n      name,\n      difficulty,\n      avatar,\n      playerIndex\n    });\n    socketInstance.on(\"waiting\", () => {\n      setState(prevState => ({\n        ...prevState,\n        waiting: true,\n        currentPlayerScore: 0,\n        opponentPlayer: []\n      }));\n    });\n    socketInstance.on(\"starting\", ({\n      minefield,\n      gameState,\n      players,\n      turn,\n      avatars\n    }) => {\n      setState(prevState => ({\n        ...prevState,\n        minefield,\n        waiting: false,\n        opponentAvatar: avatars[playerIndex === 0 ? 1 : 0]\n      }));\n      gameStart(gameState, players, turn);\n    });\n    socketInstance.on(\"joinError\", () => {\n      setState(prevState => ({\n        ...prevState,\n        joinError: true\n      }));\n    });\n    return () => {\n      socketInstance.disconnect();\n    };\n  }, []); // Empty array means this effect runs once after the initial render\n\n  const gameStart = (gameState, players, turn) => {\n    const opponent = players[state.playerIndex === 0 ? 1 : 0][1];\n    setState(prevState => ({\n      ...prevState,\n      opponentPlayer: [opponent, 0],\n      end: false\n    }));\n    setGame(gameState);\n    setTurn(turn);\n    setMessage();\n  };\n  const setGame = gameState => {\n    setState(prevState => ({\n      ...prevState,\n      game: gameState\n    }));\n  };\n  const setTurn = turn => {\n    if (state.playerIndex === turn) {\n      setState(prevState => ({\n        ...prevState,\n        turn: true\n      }));\n    } else {\n      setState(prevState => ({\n        ...prevState,\n        turn: false\n      }));\n    }\n  };\n  const setMessage = () => {\n    const message = state.turn ? \"Your Turn\" : `${state.opponentPlayer[0]}'s Turn`;\n    setState(prevState => ({\n      ...prevState,\n      statusMessage: message\n    }));\n  };\n  const handleClick = (row, col) => {\n    const {\n      grid,\n      end,\n      turn,\n      room,\n      playerIndex\n    } = state;\n    if (!grid[row][col] && !end && turn) {\n      socket.emit(\"move\", {\n        room,\n        playerIndex,\n        row,\n        col\n      });\n    }\n  };\n  const renderGrid = () => {\n    if (state.minefield) {\n      return /*#__PURE__*/_jsxDEV(GridEasy, {\n        minefield: state.minefield,\n        handleClick: handleClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 12\n    }, this);\n  };\n  if (state.joinError) {\n    return navigate(`/`);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Wait, {\n        display: state.waiting,\n        room: state.room\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Status, {\n        message: state.statusMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: renderGrid()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n};\n_s(Game, \"IaqeXIBfQgT4v0Zw9fxeEsq7RaQ=\", false, function () {\n  return [useNavigate];\n});\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","io","qs","Wait","Status","GridEasy","jsxDEV","_jsxDEV","Fragment","_Fragment","ENDPOINT","Game","_s","state","setState","minefield","grid","playerIndex","firstPlayer","turn","end","room","statusMessage","currentPlayerScore","opponentPlayer","selectedAvatar","opponentAvatar","streakBombs","waiting","joinError","socket","setSocket","navigate","socketInstance","name","difficulty","avatar","parse","window","location","search","ignoreQueryPrefix","prevState","emit","on","gameState","players","avatars","gameStart","disconnect","opponent","setGame","setTurn","setMessage","game","message","handleClick","row","col","renderGrid","fileName","_jsxFileName","lineNumber","columnNumber","children","display","_c","$RefreshReg$"],"sources":["/Users/win_thanatpong/Desktop/netcent-FindMyMines/frontend/src/pages/Game.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport io from \"socket.io-client\";\nimport qs from \"qs\";\nimport Wait from \"../components/Wait\";\nimport Status from \"../components/Status\";\nimport GridEasy from \"../components/GridEasy\";\n\nconst ENDPOINT = \"http://localhost:9000/\";\n\nconst Game = () => {\n  const [state, setState] = useState({\n    minefield: null,\n    grid: null,\n    playerIndex: null,\n    firstPlayer: null,\n    turn: true,\n    end: false,\n    room: \"\",\n    statusMessage: \"\",\n    currentPlayerScore: 0,\n    opponentPlayer: [],\n    selectedAvatar: null,\n    opponentAvatar: null,\n    streakBombs: 0,\n    waiting: false,\n    joinError: false,\n  });\n\n  const [socket, setSocket] = useState(null);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const socketInstance = io(ENDPOINT);\n    setSocket(socketInstance);\n    let { room, name, difficulty, playerIndex, avatar } = qs.parse(\n      window.location.search,\n      {\n        ignoreQueryPrefix: true,\n      }\n    );\n\n    setState(prevState => ({\n      ...prevState,\n      room,\n      playerIndex,\n      avatar: avatar === \"undefined\" ? \"avatar1\" : avatar\n    }));\n\n    socketInstance.emit(\"newRoomJoin\", {\n      room,\n      name,\n      difficulty,\n      avatar,\n      playerIndex,\n    });\n\n    socketInstance.on(\"waiting\", () => {\n      setState(prevState => ({\n        ...prevState,\n        waiting: true,\n        currentPlayerScore: 0,\n        opponentPlayer: [],\n      }));\n    });\n\n    socketInstance.on(\"starting\", ({ minefield, gameState, players, turn, avatars }) => {\n      setState(prevState => ({\n        ...prevState,\n        minefield,\n        waiting: false,\n        opponentAvatar: avatars[playerIndex === 0 ? 1 : 0],\n      }));\n      gameStart(gameState, players, turn);\n    });\n\n    socketInstance.on(\"joinError\", () => {\n      setState(prevState => ({ ...prevState, joinError: true }));\n    });\n\n    return () => {\n      socketInstance.disconnect();\n    };\n  }, []); // Empty array means this effect runs once after the initial render\n\n  const gameStart = (gameState, players, turn) => {\n    const opponent = players[state.playerIndex === 0 ? 1 : 0][1];\n    setState(prevState => ({\n      ...prevState,\n      opponentPlayer: [opponent, 0],\n      end: false,\n    }));\n    setGame(gameState);\n    setTurn(turn);\n    setMessage();\n  };\n\n  const setGame = (gameState) => {\n    setState(prevState => ({\n      ...prevState,\n      game: gameState,\n    }));\n  };\n\n  const setTurn = (turn) => {\n    if (state.playerIndex === turn) {\n      setState(prevState => ({ ...prevState, turn: true }));\n    } else {\n      setState(prevState => ({ ...prevState, turn: false }));\n    }\n  };\n\n  const setMessage = () => {\n    const message = state.turn\n      ? \"Your Turn\"\n      : `${state.opponentPlayer[0]}'s Turn`;\n    setState(prevState => ({ ...prevState, statusMessage: message }));\n  };\n\n  const handleClick = (row, col) => {\n    const { grid, end, turn, room, playerIndex } = state;\n    if (!grid[row][col] && !end && turn) {\n      socket.emit(\"move\", { room, playerIndex, row, col });\n    }\n  };\n\n  const renderGrid = () => {\n    if (state.minefield) {\n      return (\n        <GridEasy minefield={state.minefield} handleClick={handleClick} />\n      );\n    }\n    return <div></div>;\n  };\n\n  if (state.joinError) {\n    return navigate(`/`);\n  } else {\n    return (\n      <>\n        <Wait display={state.waiting} room={state.room} />\n        <Status message={state.statusMessage} />\n        <div>{renderGrid()}</div>\n      </>\n    );\n  }\n};\n\nexport default Game;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}