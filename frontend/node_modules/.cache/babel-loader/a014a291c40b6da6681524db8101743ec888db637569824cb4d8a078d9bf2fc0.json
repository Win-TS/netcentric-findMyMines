{"ast":null,"code":"var _jsxFileName = \"/Users/win_thanatpong/Desktop/netcent-FindMyMines/frontend/src/pages/Game.js\",\n  _s = $RefreshSig$();\n// import React from \"react\";\n\n// import Wait from \"../components/Wait\";\n// import Status from \"../components/Status\";\n// import GridEasy from \"../components/GridEasy\";\n\n// import io from \"socket.io-client\";\n// import qs from \"qs\";\n// import { Navigate } from \"react-router-dom\";\n\n// const ENDPOINT = \"http://localhost:9000/\";\n//const socket = io(ENDPOINT);\n\n// class Game extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       minefield: null,\n//       grid: null,\n//       playerIndex: null,\n//       firstPlayer: null,\n//       turn: true,\n//       end: false,\n//       room: \"\",\n//       statusMessage: \"\",\n//       currentPlayerScore: 0,\n//       opponentPlayer: [],\n//       selectedAvatar: null,\n//       opponentAvatar: null,\n//       streakBombs: 0,\n//       waiting: false,\n//       joinError: false,\n//     };\n//   }\n\n//   componentDidMount() {\n//     this.socket = io(ENDPOINT);\n//     let { room, name, difficulty, playerIndex, avatar } = qs.parse(\n//       window.location.search,\n//       {\n//         ignoreQueryPrefix: true,\n//       }\n//     );\n//     this.setState({ room });\n//     this.setState({ playerIndex });\n//     if (avatar === \"undefined\") avatar = \"avatar1\";\n//     this.setState({ selectedAvatar: avatar });\n//     this.socket.emit(\"newRoomJoin\", {\n//       room,\n//       name,\n//       difficulty,\n//       avatar,\n//       playerIndex,\n//     });\n//     this.socket.on(\"waiting\", () =>\n//       this.setState({\n//         waiting: true,\n//         currentPlayerScore: 0,\n//         opponentPlayer: [],\n//       })\n//     );\n//     //gameState:revealedCells array, players:[[id1, name1], [id2, name2]], turn,\n//     this.socket.on(\"starting\", ({ minefield, gameState, players, turn, avatars }) => {\n//       this.setState({\n//         minefield: minefield,\n//         waiting: false,\n//         opponentAvatar: avatars[playerIndex === 0 ? 1 : 0],\n//       });\n//       this.gameStart(gameState, players, turn);\n//       console.log(gameState, players, turn, this.state.selectedAvatar ,this.state.opponentAvatar);\n//       console.log(minefield);\n//     });\n//     this.socket.on(\"joinError\", () => this.setState({ joinError: true }));\n//     this.socket.on(\"setFirstPlayer\", ({ firstPlayer }) => {\n//       this.setState({ firstPlayer: firstPlayer });\n//     });\n//     this.socket.on(\"update\", ({ gameState, turn }) =>\n//       this.handleUpdate(gameState, turn)\n//     );\n//     this.socket.on(\"winner\", ({ gameState, turn }) =>\n//       this.handleWin(gameState, turn)\n//     );\n//     this.socket.on(\"restart\", ({ gameState, turn }) =>\n//       this.handleRestart(gameState, turn)\n//     );\n//   }\n\n//   setTurn = (turn) => {\n//     this.setState({ turn: this.state.playerIndex === turn });\n//   };\n\n//   setGame = (gameState) => {\n//     this.setState({ game: gameState });\n//   };\n\n//   setMessage() {\n//     const message = this.state.turn\n//       ? \"Your Turn\"\n//       : `${this.state.opponentPlayer[0]}'s Turn`;\n//     this.setState({ statusMessage: message });\n//   }\n\n//   gameStart = (gameState, players, turn) => {\n//     const opponent = players[this.state.playerIndex === 0 ? 1 : 0][1];\n//     this.setState({ opponentPlayer: [opponent, 0], end: false });\n//     this.setGame(gameState);\n//     this.setTurn(turn);\n//     this.setMessage();\n//   };\n\n//   handleClick = (row, col) => {\n//     const { grid, end, turn, room, playerIndex } = this.state;\n//     if (!grid[row][col] && !end && turn) {\n//       this.socket.emit(\"move\", { room, playerIndex, row, col });\n//     }\n//   };\n\n//   cellClicked = (row, col) => {\n//     if (this.state.turn && !this.state.end) {\n//       this.socket.emit(\"move\", {\n//         room: this.state.room,\n//         player: this.state.playerIndex,\n//         row,\n//         col,\n//       });\n//     }\n//   };\n\n//   handleUpdate = (gameState, turn) => {\n//     this.setGame(gameState);\n//     this.setTurn(turn);\n//     this.setMessage();\n//   };\n\n//   renderGrid = () => {\n//     if (this.state.minefield) {\n//       return(\n//         <GridEasy minefield={this.state.minefield} handleClick={this.handleClick}/>\n//       );\n//     }\n//     return <div></div>;\n//   }\n\n//   render = () => {\n//     if (this.state.joinError) {\n//       return <Navigate to={`/`} />;\n//     } else {\n//       return (\n//         <>\n//           <Wait display={this.state.waiting} room={this.state.room} />\n//           <Status message={this.state.statusMessage} />\n//           <div>\n//             {this.renderGrid()}\n//           </div>\n//         </>\n//       );\n//       // }\n//     }\n//   }\n// }\n// export default Game;\n\nimport React, { useState, useEffect } from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport io from \"socket.io-client\";\nimport qs from \"qs\";\nimport '../App.css';\nimport Wait from \"../components/Wait\";\nimport Status from \"../components/Status\";\nimport GridBlock from \"../components/GridBlock\";\nimport Scoreboard from \"../components/Scoreboard\";\nimport ResultModal from \"../components/ResultModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = \"http://localhost:9000/\";\nconst socket = io.connect(ENDPOINT);\nconst Game = () => {\n  _s();\n  const [playerName, setPlayerName] = useState(\"\");\n  const [minefield, setMinefield] = useState(null);\n  const [size, setSize] = useState(0);\n  const [numMines, setNumMines] = useState(0);\n  const [game, setGame] = useState(null);\n  const [playerIndex, setPlayerIndex] = useState(-1);\n  const [firstPlayer, setFirstPlayer] = useState(-1);\n  const [turn, setTurn] = useState(true);\n  const [end, setEnd] = useState(false);\n  const [room, setRoom] = useState(\"\");\n  const [statusMessage, setStatusMessage] = useState(\"\");\n  const [currentPlayerScore, setCurrentPlayerScore] = useState(0);\n  const [opponentPlayer, setOpponentPlayer] = useState([]);\n  const [selectedAvatar, setSelectedAvatar] = useState(null);\n  const [opponentAvatar, setOpponentAvatar] = useState(null);\n  const [streakBombs, setStreakBombs] = useState(0);\n  const [waiting, setWaiting] = useState(false);\n  const [joinError, setJoinError] = useState(false);\n  const handleClick = (row, col) => {\n    if (!game[row][col] && !end && turn) {\n      socket.emit(\"move\", {\n        room,\n        playerIndex,\n        row,\n        col\n      });\n    }\n  };\n  const handleUpdate = (gameState, turnInd, scoreArray) => {\n    setGame(gameState);\n    setTurn(playerIndex === turnInd);\n    setStatusMessage(playerIndex === turnInd ? \"Your Turn\" : `${opponentPlayer[0]}'s Turn`);\n    setCurrentPlayerScore(scoreArray[playerIndex]);\n    let currentOpponentPlayer = [...opponentPlayer];\n    currentOpponentPlayer[1] = scoreArray[playerIndex === 0 ? 1 : 0];\n    setOpponentPlayer(currentOpponentPlayer);\n  };\n  const handleWin = (gameState, scoreArray) => {\n    setGame(gameState);\n    setCurrentPlayerScore(scoreArray[playerIndex]);\n    let currentOpponentPlayer = [...opponentPlayer];\n    currentOpponentPlayer[1] = scoreArray[playerIndex === 0 ? 1 : 0];\n    setOpponentPlayer(currentOpponentPlayer);\n    setEnd(true);\n  };\n  const renderGrid = (row, col) => {\n    if (minefield) {\n      let index = row * size + col;\n      return /*#__PURE__*/_jsxDEV(GridBlock, {\n        id: index,\n        player: playerIndex,\n        mine: minefield[row][col],\n        revealed: game[row][col],\n        size: size,\n        end: end,\n        turn: turn,\n        onClick: handleClick\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 12\n    }, this);\n  };\n  useEffect(() => {\n    let {\n      room,\n      name,\n      difficulty,\n      playerInd,\n      avatar\n    } = qs.parse(window.location.search, {\n      ignoreQueryPrefix: true\n    });\n    playerInd = Number(playerInd);\n    if (avatar === \"undefined\") avatar = \"avatar1\";\n    setPlayerName(name);\n    setRoom(room);\n    setPlayerIndex(playerInd);\n    setSelectedAvatar(avatar);\n    if (difficulty === \"easy\") {\n      setSize(6);\n      setNumMines(11);\n    } else if (difficulty === \"medium\") {\n      setSize(9);\n      setNumMines(25);\n    } else if (difficulty === \"hard\") {\n      setSize(12);\n      setNumMines(43);\n    }\n    socket.emit(\"newRoomJoin\", {\n      room,\n      name,\n      difficulty,\n      avatar,\n      playerInd\n    });\n  }, []);\n  useEffect(() => {\n    socket.on(\"waiting\", () => setWaiting(true));\n    socket.on(\"starting\", ({\n      minefield,\n      gameState,\n      players,\n      turnInd,\n      avatars\n    }) => {\n      setMinefield(minefield);\n      setWaiting(false);\n      setOpponentAvatar(avatars[playerIndex === 0 ? 1 : 0]);\n      const opponent = players[playerIndex === 0 ? 1 : 0][1];\n      setOpponentPlayer([opponent, 0]);\n      setEnd(false);\n      setGame(gameState);\n      console.log(opponentAvatar);\n      setTurn(playerIndex === turnInd);\n      setStatusMessage(playerIndex === turnInd ? \"Your Turn\" : `${opponent}'s Turn`);\n    });\n    socket.on(\"setFirstPlayer\", ({\n      firstPlayer\n    }) => {\n      setFirstPlayer(firstPlayer);\n    });\n    socket.on(\"joinError\", () => setJoinError(true));\n    return () => {\n      socket.off(\"waiting\");\n      socket.off(\"starting\");\n      socket.off(\"joinError\");\n    };\n  }, [socket, opponentAvatar, minefield, waiting, playerIndex]);\n  useEffect(() => {\n    socket.on(\"update\", ({\n      gameState,\n      turnInd,\n      scoreArray\n    }) => handleUpdate(gameState, turnInd, scoreArray));\n    socket.on(\"winner\", ({\n      gameState,\n      scoreArray\n    }) => handleWin(gameState, scoreArray));\n    socket.on(\"restart\", ({\n      gameState,\n      turnInd\n    }) => this.handleRestart(gameState, turnInd));\n    return () => {\n      socket.off(\"update\");\n      socket.off(\"winner\");\n      socket.off(\"restart\");\n    };\n  }, [statusMessage, end, game, currentPlayerScore, opponentPlayer]);\n  if (joinError) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 12\n    }, this);\n  } else {\n    const gridArray = [];\n    for (let i = 0; i < size * size; i++) {\n      const newGridBlock = renderGrid(Math.floor(i / size), i % size);\n      gridArray.push(newGridBlock);\n    }\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Wait, {\n        display: waiting,\n        room: room\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Status, {\n        message: statusMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Scoreboard, {\n        player: playerName,\n        playerScore: currentPlayerScore,\n        opponent: opponentPlayer[0],\n        opponentScore: opponentPlayer[1]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ResultModal, {\n        score: currentPlayerScore,\n        opponentScore: opponentPlayer[1],\n        end: end\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `grid-div-${diff}`,\n        children: gridArray\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n};\n_s(Game, \"9SdTv0mS6WGXX3HTZGZEM2mFg1k=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","Navigate","io","qs","Wait","Status","GridBlock","Scoreboard","ResultModal","jsxDEV","_jsxDEV","Fragment","_Fragment","ENDPOINT","socket","connect","Game","_s","playerName","setPlayerName","minefield","setMinefield","size","setSize","numMines","setNumMines","game","setGame","playerIndex","setPlayerIndex","firstPlayer","setFirstPlayer","turn","setTurn","end","setEnd","room","setRoom","statusMessage","setStatusMessage","currentPlayerScore","setCurrentPlayerScore","opponentPlayer","setOpponentPlayer","selectedAvatar","setSelectedAvatar","opponentAvatar","setOpponentAvatar","streakBombs","setStreakBombs","waiting","setWaiting","joinError","setJoinError","handleClick","row","col","emit","handleUpdate","gameState","turnInd","scoreArray","currentOpponentPlayer","handleWin","renderGrid","index","id","player","mine","revealed","onClick","fileName","_jsxFileName","lineNumber","columnNumber","name","difficulty","playerInd","avatar","parse","window","location","search","ignoreQueryPrefix","Number","on","players","avatars","opponent","console","log","off","handleRestart","to","gridArray","i","newGridBlock","Math","floor","push","children","display","message","playerScore","opponentScore","score","className","diff","_c","$RefreshReg$"],"sources":["/Users/win_thanatpong/Desktop/netcent-FindMyMines/frontend/src/pages/Game.js"],"sourcesContent":["// import React from \"react\";\n\n// import Wait from \"../components/Wait\";\n// import Status from \"../components/Status\";\n// import GridEasy from \"../components/GridEasy\";\n\n// import io from \"socket.io-client\";\n// import qs from \"qs\";\n// import { Navigate } from \"react-router-dom\";\n\n// const ENDPOINT = \"http://localhost:9000/\";\n//const socket = io(ENDPOINT);\n\n// class Game extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       minefield: null,\n//       grid: null,\n//       playerIndex: null,\n//       firstPlayer: null,\n//       turn: true,\n//       end: false,\n//       room: \"\",\n//       statusMessage: \"\",\n//       currentPlayerScore: 0,\n//       opponentPlayer: [],\n//       selectedAvatar: null,\n//       opponentAvatar: null,\n//       streakBombs: 0,\n//       waiting: false,\n//       joinError: false,\n//     };\n//   }\n\n//   componentDidMount() {\n//     this.socket = io(ENDPOINT);\n//     let { room, name, difficulty, playerIndex, avatar } = qs.parse(\n//       window.location.search,\n//       {\n//         ignoreQueryPrefix: true,\n//       }\n//     );\n//     this.setState({ room });\n//     this.setState({ playerIndex });\n//     if (avatar === \"undefined\") avatar = \"avatar1\";\n//     this.setState({ selectedAvatar: avatar });\n//     this.socket.emit(\"newRoomJoin\", {\n//       room,\n//       name,\n//       difficulty,\n//       avatar,\n//       playerIndex,\n//     });\n//     this.socket.on(\"waiting\", () =>\n//       this.setState({\n//         waiting: true,\n//         currentPlayerScore: 0,\n//         opponentPlayer: [],\n//       })\n//     );\n//     //gameState:revealedCells array, players:[[id1, name1], [id2, name2]], turn,\n//     this.socket.on(\"starting\", ({ minefield, gameState, players, turn, avatars }) => {\n//       this.setState({\n//         minefield: minefield,\n//         waiting: false,\n//         opponentAvatar: avatars[playerIndex === 0 ? 1 : 0],\n//       });\n//       this.gameStart(gameState, players, turn);\n//       console.log(gameState, players, turn, this.state.selectedAvatar ,this.state.opponentAvatar);\n//       console.log(minefield);\n//     });\n//     this.socket.on(\"joinError\", () => this.setState({ joinError: true }));\n//     this.socket.on(\"setFirstPlayer\", ({ firstPlayer }) => {\n//       this.setState({ firstPlayer: firstPlayer });\n//     });\n//     this.socket.on(\"update\", ({ gameState, turn }) =>\n//       this.handleUpdate(gameState, turn)\n//     );\n//     this.socket.on(\"winner\", ({ gameState, turn }) =>\n//       this.handleWin(gameState, turn)\n//     );\n//     this.socket.on(\"restart\", ({ gameState, turn }) =>\n//       this.handleRestart(gameState, turn)\n//     );\n//   }\n\n//   setTurn = (turn) => {\n//     this.setState({ turn: this.state.playerIndex === turn });\n//   };\n\n//   setGame = (gameState) => {\n//     this.setState({ game: gameState });\n//   };\n\n//   setMessage() {\n//     const message = this.state.turn\n//       ? \"Your Turn\"\n//       : `${this.state.opponentPlayer[0]}'s Turn`;\n//     this.setState({ statusMessage: message });\n//   }\n\n//   gameStart = (gameState, players, turn) => {\n//     const opponent = players[this.state.playerIndex === 0 ? 1 : 0][1];\n//     this.setState({ opponentPlayer: [opponent, 0], end: false });\n//     this.setGame(gameState);\n//     this.setTurn(turn);\n//     this.setMessage();\n//   };\n\n//   handleClick = (row, col) => {\n//     const { grid, end, turn, room, playerIndex } = this.state;\n//     if (!grid[row][col] && !end && turn) {\n//       this.socket.emit(\"move\", { room, playerIndex, row, col });\n//     }\n//   };\n\n//   cellClicked = (row, col) => {\n//     if (this.state.turn && !this.state.end) {\n//       this.socket.emit(\"move\", {\n//         room: this.state.room,\n//         player: this.state.playerIndex,\n//         row,\n//         col,\n//       });\n//     }\n//   };\n\n//   handleUpdate = (gameState, turn) => {\n//     this.setGame(gameState);\n//     this.setTurn(turn);\n//     this.setMessage();\n//   };\n\n//   renderGrid = () => {\n//     if (this.state.minefield) {\n//       return(\n//         <GridEasy minefield={this.state.minefield} handleClick={this.handleClick}/>\n//       );\n//     }\n//     return <div></div>;\n//   }\n\n//   render = () => {\n//     if (this.state.joinError) {\n//       return <Navigate to={`/`} />;\n//     } else {\n//       return (\n//         <>\n//           <Wait display={this.state.waiting} room={this.state.room} />\n//           <Status message={this.state.statusMessage} />\n//           <div>\n//             {this.renderGrid()}\n//           </div>\n//         </>\n//       );\n//       // }\n//     }\n//   }\n// }\n// export default Game;\n\nimport React, { useState, useEffect } from \"react\";\nimport { Navigate } from \"react-router-dom\";\nimport io from \"socket.io-client\";\nimport qs from \"qs\";\nimport '../App.css'\n\nimport Wait from \"../components/Wait\";\nimport Status from \"../components/Status\";\nimport GridBlock from \"../components/GridBlock\";\nimport Scoreboard from \"../components/Scoreboard\";\nimport ResultModal from \"../components/ResultModal\";\n\nconst ENDPOINT = \"http://localhost:9000/\";\nconst socket = io.connect(ENDPOINT);\n\nconst Game = () => {\n  const [playerName, setPlayerName] = useState(\"\");\n  const [minefield, setMinefield] = useState(null);\n  const [size, setSize] = useState(0);\n  const [numMines, setNumMines] = useState(0);\n  const [game, setGame] = useState(null);\n  const [playerIndex, setPlayerIndex] = useState(-1);\n  const [firstPlayer, setFirstPlayer] = useState(-1);\n  const [turn, setTurn] = useState(true);\n  const [end, setEnd] = useState(false);\n  const [room, setRoom] = useState(\"\");\n  const [statusMessage, setStatusMessage] = useState(\"\");\n  const [currentPlayerScore, setCurrentPlayerScore] = useState(0);\n  const [opponentPlayer, setOpponentPlayer] = useState([]);\n  const [selectedAvatar, setSelectedAvatar] = useState(null);\n  const [opponentAvatar, setOpponentAvatar] = useState(null);\n  const [streakBombs, setStreakBombs] = useState(0);\n  const [waiting, setWaiting] = useState(false);\n  const [joinError, setJoinError] = useState(false);\n\n  const handleClick = (row, col) => {\n    if (!game[row][col] && !end && turn) {\n      socket.emit(\"move\", { room, playerIndex, row, col });\n    }\n  };\n\n  const handleUpdate = (gameState, turnInd, scoreArray) => {\n    setGame(gameState);\n    setTurn(playerIndex === turnInd);\n    setStatusMessage(\n      playerIndex === turnInd ? \"Your Turn\" : `${opponentPlayer[0]}'s Turn`\n    );\n    setCurrentPlayerScore(scoreArray[playerIndex]);\n    let currentOpponentPlayer = [...opponentPlayer];\n    currentOpponentPlayer[1] = scoreArray[playerIndex === 0 ? 1 : 0];\n    setOpponentPlayer(currentOpponentPlayer);\n  };\n\n  const handleWin = (gameState, scoreArray) => {\n    setGame(gameState);\n    setCurrentPlayerScore(scoreArray[playerIndex]);\n    let currentOpponentPlayer = [...opponentPlayer];\n    currentOpponentPlayer[1] = scoreArray[playerIndex === 0 ? 1 : 0];\n    setOpponentPlayer(currentOpponentPlayer);\n    setEnd(true);\n  };\n\n  const renderGrid = (row, col) => {\n    if (minefield) {\n      let index = row * size + col;\n      return (\n        <GridBlock\n          key={index}\n          id={index}\n          player={playerIndex}\n          mine={minefield[row][col]}\n          revealed={game[row][col]}\n          size={size}\n          end={end}\n          turn={turn}\n          onClick={handleClick}\n        />\n      );\n    }\n    return <div></div>;\n  };\n\n  useEffect(() => {\n    let { room, name, difficulty, playerInd, avatar } = qs.parse(\n      window.location.search,\n      {\n        ignoreQueryPrefix: true,\n      }\n    );\n    playerInd = Number(playerInd);\n    if (avatar === \"undefined\") avatar = \"avatar1\";\n    setPlayerName(name);\n    setRoom(room);\n    setPlayerIndex(playerInd);\n    setSelectedAvatar(avatar);\n    if (difficulty === \"easy\") {\n      setSize(6);\n      setNumMines(11);\n    } else if (difficulty === \"medium\") {\n      setSize(9);\n      setNumMines(25);\n    } else if (difficulty === \"hard\") {\n      setSize(12);\n      setNumMines(43);\n    }\n    socket.emit(\"newRoomJoin\", {\n      room,\n      name,\n      difficulty,\n      avatar,\n      playerInd,\n    });\n  }, []);\n\n  useEffect(() => {\n    socket.on(\"waiting\", () => setWaiting(true));\n\n    socket.on(\n      \"starting\",\n      ({ minefield, gameState, players, turnInd, avatars }) => {\n        setMinefield(minefield);\n        setWaiting(false);\n        setOpponentAvatar(avatars[playerIndex === 0 ? 1 : 0]);\n        const opponent = players[playerIndex === 0 ? 1 : 0][1];\n        setOpponentPlayer([opponent, 0]);\n        setEnd(false);\n        setGame(gameState);\n        console.log(opponentAvatar);\n        setTurn(playerIndex === turnInd);\n        setStatusMessage(\n          playerIndex === turnInd ? \"Your Turn\" : `${opponent}'s Turn`\n        );\n      }\n    );\n\n    socket.on(\"setFirstPlayer\", ({ firstPlayer }) => {\n      setFirstPlayer(firstPlayer);\n    });\n\n    socket.on(\"joinError\", () => setJoinError(true));\n\n    return () => {\n      socket.off(\"waiting\");\n      socket.off(\"starting\");\n      socket.off(\"joinError\");\n    };\n  }, [socket, opponentAvatar, minefield, waiting, playerIndex]);\n\n  useEffect(() => {\n    socket.on(\"update\", ({ gameState, turnInd, scoreArray }) =>\n      handleUpdate(gameState, turnInd, scoreArray)\n    );\n    socket.on(\"winner\", ({ gameState, scoreArray }) =>\n      handleWin(gameState, scoreArray)\n    );\n    socket.on(\"restart\", ({ gameState, turnInd }) =>\n      this.handleRestart(gameState, turnInd)\n    );\n    return () => {\n      socket.off(\"update\");\n      socket.off(\"winner\");\n      socket.off(\"restart\");\n    };\n  }, [statusMessage, end, game, currentPlayerScore, opponentPlayer]);\n\n  if (joinError) {\n    return <Navigate to={\"/\"} />;\n  } else {\n    const gridArray = [];\n    for (let i = 0; i < size * size; i++) {\n      const newGridBlock = renderGrid(Math.floor(i / size), i % size);\n      gridArray.push(newGridBlock);\n    }\n    return (\n      <>\n        <Wait display={waiting} room={room} />\n        <Status message={statusMessage} />\n        <Scoreboard\n          player={playerName}\n          playerScore={currentPlayerScore}\n          opponent={opponentPlayer[0]}\n          opponentScore={opponentPlayer[1]}\n        />\n        <ResultModal\n          score={currentPlayerScore}\n          opponentScore={opponentPlayer[1]}\n          end={end}\n        />\n        <div className={`grid-div-${diff}`}>{gridArray}</div>\n      </>\n    );\n  }\n};\nexport default Game;\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,OAAOC,EAAE,MAAM,kBAAkB;AACjC,OAAOC,EAAE,MAAM,IAAI;AACnB,OAAO,YAAY;AAEnB,OAAOC,IAAI,MAAM,oBAAoB;AACrC,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,WAAW,MAAM,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEpD,MAAMC,QAAQ,GAAG,wBAAwB;AACzC,MAAMC,MAAM,GAAGZ,EAAE,CAACa,OAAO,CAACF,QAAQ,CAAC;AAEnC,MAAMG,IAAI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"},"metadata":{},"sourceType":"module","externalDependencies":[]}