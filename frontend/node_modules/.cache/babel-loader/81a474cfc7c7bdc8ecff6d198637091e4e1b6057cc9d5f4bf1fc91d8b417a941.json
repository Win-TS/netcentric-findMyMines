{"ast":null,"code":"var _jsxFileName = \"/Users/win_thanatpong/Desktop/netcent-FindMyMines/frontend/src/pages/Game.js\";\nimport React from \"react\";\nimport Wait from \"../components/Wait\";\nimport Status from \"../components/Status\";\nimport io from \"socket.io-client\";\nimport qs from \"qs\";\nimport { Navigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = \"http://localhost:9000/\";\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.setTurn = turn => {\n      if (this.state.playerIndex === turn) {\n        this.setState({\n          turn: true\n        });\n      } else {\n        this.setState({\n          turn: false\n        });\n      }\n    };\n    this.setGame = gameState => {\n      this.setState({\n        game: gameState\n      });\n    };\n    this.state = {\n      grid: null,\n      playerIndex: null,\n      firstPlayer: null,\n      turn: true,\n      end: false,\n      room: \"\",\n      statusMessage: \"\",\n      currentPlayerScore: 0,\n      opponentPlayer: [],\n      streakBombs: 0,\n      waiting: false,\n      joinError: false\n    };\n    this.socketID = null;\n  }\n  componentDidMount() {\n    this.socket = io(ENDPOINT);\n    const {\n      room,\n      name,\n      difficulty,\n      playerIndex\n    } = qs.parse(window.location.search, {\n      ignoreQueryPrefix: true\n    });\n    this.setState({\n      room\n    });\n    this.setState({\n      playerIndex\n    });\n    this.socket.emit(\"newRoomJoin\", {\n      room,\n      name,\n      difficulty\n    });\n    this.socket.on(\"waiting\", () => this.setState({\n      waiting: true,\n      currentPlayerScore: 0,\n      opponentPlayer: []\n    }));\n    //gameState:revealedCells array, players:[[id1, name1], [id2, name2]], turn\n    this.socket.on(\"starting\", ({\n      gameState,\n      players,\n      turn\n    }) => {\n      this.setState({\n        waiting: false\n      });\n      //this.gameStart(gameState, players, turn)\n    });\n\n    this.socket.on(\"joinError\", () => this.setState({\n      joinError: true\n    }));\n    this.socket.on(\"setFirstPlayer\", ({\n      firstPlayer,\n      id\n    }) => {\n      this.setState({\n        firstPlayer: firstPlayer\n      });\n      this.socketID = id;\n    });\n    this.socket.on(\"update\", ({\n      gameState,\n      turn\n    }) => this.handleUpdate(gameState, turn));\n    this.socket.on(\"winner\", ({\n      gameState,\n      turn\n    }) => this.handleWin(gameState, turn));\n    this.socket.on(\"restart\", ({\n      gameState,\n      turn\n    }) => this.handleRestart(gameState, turn));\n  }\n  render() {\n    if (this.state.joinError) {\n      return /*#__PURE__*/_jsxDEV(Navigate, {\n        to: `/`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 14\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Wait, {\n          display: this.state.waiting,\n          room: this.state.room\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Status, {\n          message: this.state.statusMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n      // }\n    }\n  }\n}\n\nexport default Game;","map":{"version":3,"names":["React","Wait","Status","io","qs","Navigate","jsxDEV","_jsxDEV","Fragment","_Fragment","ENDPOINT","Game","Component","constructor","props","setTurn","turn","state","playerIndex","setState","setGame","gameState","game","grid","firstPlayer","end","room","statusMessage","currentPlayerScore","opponentPlayer","streakBombs","waiting","joinError","socketID","componentDidMount","socket","name","difficulty","parse","window","location","search","ignoreQueryPrefix","emit","on","players","id","handleUpdate","handleWin","handleRestart","render","to","fileName","_jsxFileName","lineNumber","columnNumber","children","display","message"],"sources":["/Users/win_thanatpong/Desktop/netcent-FindMyMines/frontend/src/pages/Game.js"],"sourcesContent":["import React from \"react\";\n\nimport Wait from \"../components/Wait\";\nimport Status from \"../components/Status\";\n\nimport io from \"socket.io-client\";\nimport qs from \"qs\";\nimport { Navigate } from \"react-router-dom\";\n\nconst ENDPOINT = \"http://localhost:9000/\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: null,\n      playerIndex: null,\n      firstPlayer: null,\n      turn: true,\n      end: false,\n      room: \"\",\n      statusMessage: \"\",\n      currentPlayerScore: 0,\n      opponentPlayer: [],\n      streakBombs: 0,\n      waiting: false,\n      joinError: false,\n    };\n    this.socketID = null;\n  }\n\n  componentDidMount() {\n    this.socket = io(ENDPOINT);\n    const { room, name, difficulty, playerIndex } = qs.parse(\n      window.location.search,\n      {\n        ignoreQueryPrefix: true,\n      }\n    );\n    this.setState({ room });\n    this.setState({ playerIndex });\n    this.socket.emit(\"newRoomJoin\", { room, name, difficulty });\n    this.socket.on(\"waiting\", () =>\n      this.setState({\n        waiting: true,\n        currentPlayerScore: 0,\n        opponentPlayer: [],\n      })\n    );\n    //gameState:revealedCells array, players:[[id1, name1], [id2, name2]], turn\n    this.socket.on(\"starting\", ({ gameState, players, turn }) => {\n      this.setState({ waiting: false });\n      //this.gameStart(gameState, players, turn)\n    });\n    this.socket.on(\"joinError\", () => this.setState({ joinError: true }));\n    this.socket.on(\"setFirstPlayer\", ({ firstPlayer, id }) => {\n      this.setState({ firstPlayer: firstPlayer });\n      this.socketID = id;\n    });\n    this.socket.on(\"update\", ({ gameState, turn }) =>\n      this.handleUpdate(gameState, turn)\n    );\n    this.socket.on(\"winner\", ({ gameState, turn }) =>\n      this.handleWin(gameState, turn)\n    );\n    this.socket.on(\"restart\", ({ gameState, turn }) =>\n      this.handleRestart(gameState, turn)\n    );\n  }\n\n  setTurn = (turn) => {\n    if (this.state.playerIndex === turn) {\n      this.setState({ turn: true });\n    } else {\n      this.setState({ turn: false });\n    }\n  };\n\n  setGame = (gameState) => {\n    this.setState({ game: gameState });\n  };\n\n  render() {\n    if (this.state.joinError) {\n      return <Navigate to={`/`} />;\n    } else {\n      return (\n        <>\n          <Wait display={this.state.waiting} room={this.state.room} />\n          <Status message={this.state.statusMessage} />\n        </>\n      );\n      // }\n    }\n  }\n}\nexport default Game;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}