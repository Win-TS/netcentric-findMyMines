{"ast":null,"code":"var _jsxFileName = \"/Users/win_thanatpong/Desktop/netcent-FindMyMines/frontend/src/pages/Game.js\",\n  _s = $RefreshSig$();\n// import React from \"react\";\n\n// import Wait from \"../components/Wait\";\n// import Status from \"../components/Status\";\n// import GridEasy from \"../components/GridEasy\";\n\n// import io from \"socket.io-client\";\n// import qs from \"qs\";\n// import { Navigate } from \"react-router-dom\";\n\n// const ENDPOINT = \"http://localhost:9000/\";\n//const socket = io(ENDPOINT);\n\n// class Game extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       minefield: null,\n//       grid: null,\n//       playerIndex: null,\n//       firstPlayer: null,\n//       turn: true,\n//       end: false,\n//       room: \"\",\n//       statusMessage: \"\",\n//       currentPlayerScore: 0,\n//       opponentPlayer: [],\n//       selectedAvatar: null,\n//       opponentAvatar: null,\n//       streakBombs: 0,\n//       waiting: false,\n//       joinError: false,\n//     };\n//   }\n\n//   componentDidMount() {\n//     this.socket = io(ENDPOINT);\n//     let { room, name, difficulty, playerIndex, avatar } = qs.parse(\n//       window.location.search,\n//       {\n//         ignoreQueryPrefix: true,\n//       }\n//     );\n//     this.setState({ room });\n//     this.setState({ playerIndex });\n//     if (avatar === \"undefined\") avatar = \"avatar1\";\n//     this.setState({ selectedAvatar: avatar });\n//     this.socket.emit(\"newRoomJoin\", {\n//       room,\n//       name,\n//       difficulty,\n//       avatar,\n//       playerIndex,\n//     });\n//     this.socket.on(\"waiting\", () =>\n//       this.setState({\n//         waiting: true,\n//         currentPlayerScore: 0,\n//         opponentPlayer: [],\n//       })\n//     );\n//     //gameState:revealedCells array, players:[[id1, name1], [id2, name2]], turn,\n//     this.socket.on(\"starting\", ({ minefield, gameState, players, turn, avatars }) => {\n//       this.setState({\n//         minefield: minefield,\n//         waiting: false,\n//         opponentAvatar: avatars[playerIndex === 0 ? 1 : 0],\n//       });\n//       this.gameStart(gameState, players, turn);\n//       console.log(gameState, players, turn, this.state.selectedAvatar ,this.state.opponentAvatar);\n//       console.log(minefield);\n//     });\n//     this.socket.on(\"joinError\", () => this.setState({ joinError: true }));\n//     this.socket.on(\"setFirstPlayer\", ({ firstPlayer }) => {\n//       this.setState({ firstPlayer: firstPlayer });\n//     });\n//     this.socket.on(\"update\", ({ gameState, turn }) =>\n//       this.handleUpdate(gameState, turn)\n//     );\n//     this.socket.on(\"winner\", ({ gameState, turn }) =>\n//       this.handleWin(gameState, turn)\n//     );\n//     this.socket.on(\"restart\", ({ gameState, turn }) =>\n//       this.handleRestart(gameState, turn)\n//     );\n//   }\n\n//   setTurn = (turn) => {\n//     this.setState({ turn: this.state.playerIndex === turn });\n//   };\n\n//   setGame = (gameState) => {\n//     this.setState({ game: gameState });\n//   };\n\n//   setMessage() {\n//     const message = this.state.turn\n//       ? \"Your Turn\"\n//       : `${this.state.opponentPlayer[0]}'s Turn`;\n//     this.setState({ statusMessage: message });\n//   }\n\n//   gameStart = (gameState, players, turn) => {\n//     const opponent = players[this.state.playerIndex === 0 ? 1 : 0][1];\n//     this.setState({ opponentPlayer: [opponent, 0], end: false });\n//     this.setGame(gameState);\n//     this.setTurn(turn);\n//     this.setMessage();\n//   };\n\n//   handleClick = (row, col) => {\n//     const { grid, end, turn, room, playerIndex } = this.state;\n//     if (!grid[row][col] && !end && turn) {\n//       this.socket.emit(\"move\", { room, playerIndex, row, col });\n//     }\n//   };\n\n//   cellClicked = (row, col) => {\n//     if (this.state.turn && !this.state.end) {\n//       this.socket.emit(\"move\", {\n//         room: this.state.room,\n//         player: this.state.playerIndex,\n//         row,\n//         col,\n//       });\n//     }\n//   };\n\n//   handleUpdate = (gameState, turn) => {\n//     this.setGame(gameState);\n//     this.setTurn(turn);\n//     this.setMessage();\n//   };\n\n//   renderGrid = () => {\n//     if (this.state.minefield) {\n//       return(\n//         <GridEasy minefield={this.state.minefield} handleClick={this.handleClick}/>\n//       );\n//     }\n//     return <div></div>;\n//   }\n\n//   render = () => {\n//     if (this.state.joinError) {\n//       return <Navigate to={`/`} />;\n//     } else {\n//       return (\n//         <>\n//           <Wait display={this.state.waiting} room={this.state.room} />\n//           <Status message={this.state.statusMessage} />\n//           <div>\n//             {this.renderGrid()}\n//           </div>\n//         </>\n//       );\n//       // }\n//     }\n//   }\n// }\n// export default Game;\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams, Navigate } from 'react-router-dom';\nimport io from \"socket.io-client\";\nimport Wait from \"../components/Wait\";\nimport Status from \"../components/Status\";\nimport GridEasy from \"../components/GridEasy\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = \"http://localhost:9000/\";\nconst socket = io.connect(ENDPOINT);\nconst Game = () => {\n  _s();\n  const [state, setState] = useState({\n    minefield: null,\n    grid: null,\n    playerIndex: null,\n    firstPlayer: null,\n    turn: true,\n    end: false,\n    room: \"\",\n    statusMessage: \"\",\n    currentPlayerScore: 0,\n    opponentPlayer: [],\n    selectedAvatar: null,\n    opponentAvatar: null,\n    streakBombs: 0,\n    waiting: false,\n    joinError: false\n  });\n  const setTurn = turn => {\n    setState({\n      ...state,\n      turn: state.playerIndex === turn\n    });\n  };\n  const setGame = gameState => {\n    setState({\n      ...state,\n      game: gameState\n    });\n  };\n  const setMessage = () => {\n    const message = state.turn ? \"Your Turn\" : `${state.opponentPlayer[0]}'s Turn`;\n    setState({\n      ...state,\n      statusMessage: message\n    });\n  };\n  const handleClick = (row, col) => {\n    const {\n      grid,\n      end,\n      turn,\n      room,\n      playerIndex\n    } = state;\n    if (!grid[row][col] && !end && turn) {\n      // Handle click logic here\n    }\n  };\n  const handleUpdate = (gameState, turn) => {\n    setGame(gameState);\n    setTurn(turn);\n    setMessage();\n  };\n  const renderGrid = () => {\n    if (state.minefield) {\n      return /*#__PURE__*/_jsxDEV(GridEasy, {\n        minefield: this.state.minefield,\n        handleClick: this.handleClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 12\n    }, this);\n  };\n  useEffect(() => {\n    if (avatar === \"undefined\") avatar = \"avatar1\";\n    setState({\n      ...state,\n      room,\n      playerIndex,\n      selectedAvatar: avatar\n    });\n    socket.emit(\"newRoomJoin\", {\n      room,\n      name,\n      difficulty,\n      avatar,\n      playerIndex\n    });\n    socket.on(\"waiting\", () => setState({\n      ...state,\n      waiting: true,\n      currentPlayerScore: 0,\n      opponentPlayer: []\n    }));\n    socket.on(\"starting\", ({\n      minefield,\n      gameState,\n      players,\n      turn,\n      avatars\n    }) => {\n      setState({\n        ...state,\n        minefield: minefield,\n        waiting: false,\n        opponentAvatar: avatars[playerIndex === 0 ? 1 : 0]\n      });\n      this.gameStart(gameState, players, turn);\n      console.log(gameState, players, turn, state.selectedAvatar, state.opponentAvatar);\n      console.log(minefield);\n    });\n    socket.on(\"joinError\", () => setState({\n      ...state,\n      joinError: true\n    }));\n    socket.on(\"setFirstPlayer\", ({\n      firstPlayer\n    }) => {\n      setState({\n        ...state,\n        firstPlayer\n      });\n    });\n    socket.on(\"update\", ({\n      gameState,\n      turn\n    }) => this.handleUpdate(gameState, turn));\n    socket.on(\"winner\", ({\n      gameState,\n      turn\n    }) => this.handleWin(gameState, turn));\n    socket.on(\"restart\", ({\n      gameState,\n      turn\n    }) => this.handleRestart(gameState, turn));\n    return () => {\n      socket.off(\"waiting\");\n      socket.off(\"starting\");\n      socket.off(\"joinError\");\n      socket.off(\"setFirstPlayer\");\n      socket.off(\"update\");\n      socket.off(\"winner\");\n      socket.off(\"restart\");\n    };\n  }, [socket]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Wait, {\n      display: state.waiting,\n      room: state.room\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Status, {\n      message: state.statusMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: renderGrid()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(Game, \"jwx8AX1/XQuaaOHb5aAEmJVaOss=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","useEffect","useParams","Navigate","io","Wait","Status","GridEasy","jsxDEV","_jsxDEV","Fragment","_Fragment","ENDPOINT","socket","connect","Game","_s","state","setState","minefield","grid","playerIndex","firstPlayer","turn","end","room","statusMessage","currentPlayerScore","opponentPlayer","selectedAvatar","opponentAvatar","streakBombs","waiting","joinError","setTurn","setGame","gameState","game","setMessage","message","handleClick","row","col","handleUpdate","renderGrid","fileName","_jsxFileName","lineNumber","columnNumber","avatar","emit","name","difficulty","on","players","avatars","gameStart","console","log","handleWin","handleRestart","off","children","display","_c","$RefreshReg$"],"sources":["/Users/win_thanatpong/Desktop/netcent-FindMyMines/frontend/src/pages/Game.js"],"sourcesContent":["// import React from \"react\";\n\n// import Wait from \"../components/Wait\";\n// import Status from \"../components/Status\";\n// import GridEasy from \"../components/GridEasy\";\n\n// import io from \"socket.io-client\";\n// import qs from \"qs\";\n// import { Navigate } from \"react-router-dom\";\n\n// const ENDPOINT = \"http://localhost:9000/\";\n//const socket = io(ENDPOINT);\n\n// class Game extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       minefield: null,\n//       grid: null,\n//       playerIndex: null,\n//       firstPlayer: null,\n//       turn: true,\n//       end: false,\n//       room: \"\",\n//       statusMessage: \"\",\n//       currentPlayerScore: 0,\n//       opponentPlayer: [],\n//       selectedAvatar: null,\n//       opponentAvatar: null,\n//       streakBombs: 0,\n//       waiting: false,\n//       joinError: false,\n//     };\n//   }\n\n//   componentDidMount() {\n//     this.socket = io(ENDPOINT);\n//     let { room, name, difficulty, playerIndex, avatar } = qs.parse(\n//       window.location.search,\n//       {\n//         ignoreQueryPrefix: true,\n//       }\n//     );\n//     this.setState({ room });\n//     this.setState({ playerIndex });\n//     if (avatar === \"undefined\") avatar = \"avatar1\";\n//     this.setState({ selectedAvatar: avatar });\n//     this.socket.emit(\"newRoomJoin\", {\n//       room,\n//       name,\n//       difficulty,\n//       avatar,\n//       playerIndex,\n//     });\n//     this.socket.on(\"waiting\", () =>\n//       this.setState({\n//         waiting: true,\n//         currentPlayerScore: 0,\n//         opponentPlayer: [],\n//       })\n//     );\n//     //gameState:revealedCells array, players:[[id1, name1], [id2, name2]], turn,\n//     this.socket.on(\"starting\", ({ minefield, gameState, players, turn, avatars }) => {\n//       this.setState({\n//         minefield: minefield,\n//         waiting: false,\n//         opponentAvatar: avatars[playerIndex === 0 ? 1 : 0],\n//       });\n//       this.gameStart(gameState, players, turn);\n//       console.log(gameState, players, turn, this.state.selectedAvatar ,this.state.opponentAvatar);\n//       console.log(minefield);\n//     });\n//     this.socket.on(\"joinError\", () => this.setState({ joinError: true }));\n//     this.socket.on(\"setFirstPlayer\", ({ firstPlayer }) => {\n//       this.setState({ firstPlayer: firstPlayer });\n//     });\n//     this.socket.on(\"update\", ({ gameState, turn }) =>\n//       this.handleUpdate(gameState, turn)\n//     );\n//     this.socket.on(\"winner\", ({ gameState, turn }) =>\n//       this.handleWin(gameState, turn)\n//     );\n//     this.socket.on(\"restart\", ({ gameState, turn }) =>\n//       this.handleRestart(gameState, turn)\n//     );\n//   }\n\n//   setTurn = (turn) => {\n//     this.setState({ turn: this.state.playerIndex === turn });\n//   };\n\n//   setGame = (gameState) => {\n//     this.setState({ game: gameState });\n//   };\n\n//   setMessage() {\n//     const message = this.state.turn\n//       ? \"Your Turn\"\n//       : `${this.state.opponentPlayer[0]}'s Turn`;\n//     this.setState({ statusMessage: message });\n//   }\n\n//   gameStart = (gameState, players, turn) => {\n//     const opponent = players[this.state.playerIndex === 0 ? 1 : 0][1];\n//     this.setState({ opponentPlayer: [opponent, 0], end: false });\n//     this.setGame(gameState);\n//     this.setTurn(turn);\n//     this.setMessage();\n//   };\n\n//   handleClick = (row, col) => {\n//     const { grid, end, turn, room, playerIndex } = this.state;\n//     if (!grid[row][col] && !end && turn) {\n//       this.socket.emit(\"move\", { room, playerIndex, row, col });\n//     }\n//   };\n\n//   cellClicked = (row, col) => {\n//     if (this.state.turn && !this.state.end) {\n//       this.socket.emit(\"move\", {\n//         room: this.state.room,\n//         player: this.state.playerIndex,\n//         row,\n//         col,\n//       });\n//     }\n//   };\n\n//   handleUpdate = (gameState, turn) => {\n//     this.setGame(gameState);\n//     this.setTurn(turn);\n//     this.setMessage();\n//   };\n\n//   renderGrid = () => {\n//     if (this.state.minefield) {\n//       return(\n//         <GridEasy minefield={this.state.minefield} handleClick={this.handleClick}/>\n//       );\n//     }\n//     return <div></div>;\n//   }\n\n//   render = () => {\n//     if (this.state.joinError) {\n//       return <Navigate to={`/`} />;\n//     } else {\n//       return (\n//         <>\n//           <Wait display={this.state.waiting} room={this.state.room} />\n//           <Status message={this.state.statusMessage} />\n//           <div>\n//             {this.renderGrid()}\n//           </div>\n//         </>\n//       );\n//       // }\n//     }\n//   }\n// }\n// export default Game;\n\nimport React, { useState, useEffect } from 'react';\nimport { useParams, Navigate } from 'react-router-dom';\nimport io from \"socket.io-client\";\n\nimport Wait from \"../components/Wait\";\nimport Status from \"../components/Status\";\nimport GridEasy from \"../components/GridEasy\";\n\nconst ENDPOINT = \"http://localhost:9000/\";\nconst socket = io.connect(ENDPOINT);\n\nconst Game = () => {\n  const [state, setState] = useState({\n    minefield: null,\n    grid: null,\n    playerIndex: null,\n    firstPlayer: null,\n    turn: true,\n    end: false,\n    room: \"\",\n    statusMessage: \"\",\n    currentPlayerScore: 0,\n    opponentPlayer: [],\n    selectedAvatar: null,\n    opponentAvatar: null,\n    streakBombs: 0,\n    waiting: false,\n    joinError: false,\n  });\n\n  const setTurn = (turn) => {\n    setState({ ...state, turn: state.playerIndex === turn });\n  };\n\n  const setGame = (gameState) => {\n    setState({ ...state, game: gameState });\n  };\n\n  const setMessage = () => {\n    const message = state.turn\n      ? \"Your Turn\"\n      : `${state.opponentPlayer[0]}'s Turn`;\n    setState({ ...state, statusMessage: message });\n  };\n\n  const handleClick = (row, col) => {\n    const { grid, end, turn, room, playerIndex } = state;\n    if (!grid[row][col] && !end && turn) {\n      // Handle click logic here\n    }\n  };\n\n  const handleUpdate = (gameState, turn) => {\n    setGame(gameState);\n    setTurn(turn);\n    setMessage();\n  };\n\n\n  const renderGrid = () => {\n    if (state.minefield) {\n      return(\n        <GridEasy minefield={this.state.minefield} handleClick={this.handleClick}/>\n      );\n    }\n    return <div></div>;\n  }\n\n  useEffect(() => {\n    if (avatar === \"undefined\") avatar = \"avatar1\";\n\n    setState({ ...state, room, playerIndex, selectedAvatar: avatar });\n\n    socket.emit(\"newRoomJoin\", {\n      room,\n      name,\n      difficulty,\n      avatar,\n      playerIndex,\n    });\n\n    socket.on(\"waiting\", () =>\n      setState({\n        ...state,\n        waiting: true,\n        currentPlayerScore: 0,\n        opponentPlayer: [],\n      })\n    );\n\n    socket.on(\"starting\", ({ minefield, gameState, players, turn, avatars }) => {\n      setState({\n        ...state,\n        minefield: minefield,\n        waiting: false,\n        opponentAvatar: avatars[playerIndex === 0 ? 1 : 0],\n      });\n      this.gameStart(gameState, players, turn);\n      console.log(gameState, players, turn, state.selectedAvatar, state.opponentAvatar);\n      console.log(minefield);\n    });\n\n    socket.on(\"joinError\", () => setState({ ...state, joinError: true }));\n\n    socket.on(\"setFirstPlayer\", ({ firstPlayer }) => {\n      setState({ ...state, firstPlayer });\n    });\n\n    socket.on(\"update\", ({ gameState, turn }) => this.handleUpdate(gameState, turn));\n\n    socket.on(\"winner\", ({ gameState, turn }) => this.handleWin(gameState, turn));\n\n    socket.on(\"restart\", ({ gameState, turn }) => this.handleRestart(gameState, turn));\n    \n    return () => {\n      socket.off(\"waiting\");\n      socket.off(\"starting\");\n      socket.off(\"joinError\");\n      socket.off(\"setFirstPlayer\");\n      socket.off(\"update\");\n      socket.off(\"winner\");\n      socket.off(\"restart\");\n    };\n\n  }, [socket]);\n\n  return (\n    <>\n      <Wait display={state.waiting} room={state.room} />\n      <Status message={state.statusMessage} />\n      <div>{renderGrid()}</div>\n    </>\n  );\n\n}\n\nexport default Game;"],"mappings":";;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,QAAQ,QAAQ,kBAAkB;AACtD,OAAOC,EAAE,MAAM,kBAAkB;AAEjC,OAAOC,IAAI,MAAM,oBAAoB;AACrC,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,QAAQ,MAAM,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE9C,MAAMC,QAAQ,GAAG,wBAAwB;AACzC,MAAMC,MAAM,GAAGT,EAAE,CAACU,OAAO,CAACF,QAAQ,CAAC;AAEnC,MAAMG,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAAC;IACjCmB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"},"metadata":{},"sourceType":"module","externalDependencies":[]}