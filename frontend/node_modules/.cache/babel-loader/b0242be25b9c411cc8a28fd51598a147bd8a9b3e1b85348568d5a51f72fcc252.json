{"ast":null,"code":"var _jsxFileName = \"/Users/win_thanatpong/Desktop/netcent-FindMyMines/frontend/src/components/GridEasy.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GridEasy = ({\n  minefield,\n  handleClick\n}) => {\n  _s();\n  const size = 6;\n  const handleCellClick = (row, col) => {\n    handleClick(row, col);\n  };\n  const [score, setScore] = useState(0);\n  useEffect(() => {\n    const easyBoard = document.getElementById(\"easy-board\");\n\n    // Clear any existing tiles from the board\n    easyBoard.innerHTML = \"\";\n    for (let r = 0; r < size; r++) {\n      for (let c = 0; c < size; c++) {\n        // Create a div element for each tile\n        let tile = document.createElement(\"div\");\n        tile.id = r.toString() + \"-\" + c.toString();\n\n        // Check if the tile has a bomb (value is 1 in mineArray)\n        if (minefield[r][c] === 1) {\n          // Create an image element for the bomb and set its source\n          let bombImage = document.createElement(\"img\");\n          bombImage.src = \"path/to/bomb-image.png\"; // Replace with the actual image path\n          bombImage.style.display = \"none\"; // Hide the bomb image initially\n\n          // Add a click event listener to the tile\n          tile.addEventListener(\"click\", () => {\n            // Use the functional update form to correctly update the score\n            setScore(prevScore => prevScore + 1);\n            // Show the bomb image when the tile with a bomb is clicked\n            bombImage.style.display = \"block\";\n          });\n\n          // Append the bomb image to the tile\n          tile.appendChild(bombImage);\n        } else {\n          // If it's not a bomb, add a click event listener to the tile\n          tile.addEventListener(\"click\", () => {\n            // Set the text content to \"opened\" when the tile is clicked\n            tile.textContent = \"opened\";\n            tile.style.fontSize = \"12px\";\n            handleCellClick(r, c);\n          });\n        }\n\n        // Append the tile to the easyBoard\n        easyBoard.appendChild(tile);\n      }\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"easy-board\",\n      children: minefield.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `cell ${cell === 1 ? \"bomb\" : \"\"}`,\n          onClick: () => handleCellClick(rowIndex, colIndex),\n          children: cell === 0 ? \"opened\" : \"\"\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(GridEasy, \"6LqkIJiaorzg0taiAgz78FTgEiM=\");\n_c = GridEasy;\nexport default GridEasy;\nvar _c;\n$RefreshReg$(_c, \"GridEasy\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","GridEasy","minefield","handleClick","_s","size","handleCellClick","row","col","score","setScore","easyBoard","document","getElementById","innerHTML","r","c","tile","createElement","id","toString","bombImage","src","style","display","addEventListener","prevScore","appendChild","textContent","fontSize","children","map","rowIndex","className","cell","colIndex","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/win_thanatpong/Desktop/netcent-FindMyMines/frontend/src/components/GridEasy.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\nconst GridEasy = ({ minefield, handleClick }) => {\n\n  const size = 6;\n  const handleCellClick = (row, col) => {\n    handleClick(row, col);\n  };\n  const [score, setScore] = useState(0);\n\n  useEffect(() => {\n    const easyBoard = document.getElementById(\"easy-board\");\n\n    // Clear any existing tiles from the board\n    easyBoard.innerHTML = \"\";\n\n    for (let r = 0; r < size; r++) {\n      for (let c = 0; c < size; c++) {\n        // Create a div element for each tile\n        let tile = document.createElement(\"div\");\n        tile.id = r.toString() + \"-\" + c.toString();\n\n        // Check if the tile has a bomb (value is 1 in mineArray)\n        if (minefield[r][c] === 1) {\n          // Create an image element for the bomb and set its source\n          let bombImage = document.createElement(\"img\");\n          bombImage.src = \"path/to/bomb-image.png\"; // Replace with the actual image path\n          bombImage.style.display = \"none\"; // Hide the bomb image initially\n\n          // Add a click event listener to the tile\n          tile.addEventListener(\"click\", () => {\n            // Use the functional update form to correctly update the score\n            setScore((prevScore) => prevScore + 1);\n            // Show the bomb image when the tile with a bomb is clicked\n            bombImage.style.display = \"block\";\n          });\n\n          // Append the bomb image to the tile\n          tile.appendChild(bombImage);\n        } else {\n          // If it's not a bomb, add a click event listener to the tile\n          tile.addEventListener(\"click\", () => {\n            // Set the text content to \"opened\" when the tile is clicked\n            tile.textContent = \"opened\";\n            tile.style.fontSize = \"12px\";\n            handleCellClick(r, c)\n          });\n        }\n\n        // Append the tile to the easyBoard\n        easyBoard.appendChild(tile);\n      }\n    }\n  }, []);\n\n  return (\n    <div>\n      {/* ... rest of the component remains the same */}\n      <div id=\"easy-board\">\n        {minefield.map((row, rowIndex) => (\n          <div key={rowIndex} className=\"row\">\n            {row.map((cell, colIndex) => (\n              <div\n                key={colIndex}\n                className={`cell ${cell === 1 ? \"bomb\" : \"\"}`}\n                onClick={() => handleCellClick(rowIndex, colIndex)}\n              >\n                {cell === 0 ? \"opened\" : \"\"}\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default GridEasy;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}