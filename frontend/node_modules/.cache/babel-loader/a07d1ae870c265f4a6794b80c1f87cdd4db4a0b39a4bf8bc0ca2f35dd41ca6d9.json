{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport io from 'socket.io-client';\nconst socket = io.connect('http://localhost:9000');\n\n// check online clients\nexport const useOnlineClients = () => {\n  _s();\n  const [onlineClients, setOnlineClients] = useState(0);\n  useEffect(() => {\n    socket.on('onlineClients', count => {\n      setOnlineClients(count);\n    });\n    return () => {\n      socket.off('onlineClients');\n    };\n  }, []);\n  return onlineClients;\n};\n\n// check room number and status\n_s(useOnlineClients, \"Z0KgWvQvx9i73w62xTeytpVr8H8=\");\nexport const usePlayerName = () => {\n  _s2();\n  const [playerName, setPlayerName] = useState(\"\");\n  const [playerNameReceived, setPlayerNameReceived] = useState(\"\");\n  const sendPlayerName = (roomNo, playerName, difficulty) => {\n    socket.emit(\"sendPlayerName\", {\n      playerName,\n      roomNo,\n      difficulty\n    });\n  };\n  useEffect(() => {\n    socket.on(\"roomFull\", message => {\n      alert(message);\n    });\n    socket.on(\"receivePlayerName\", data => {\n      setPlayerNameReceived(data.playerName);\n    });\n    return () => {\n      socket.off(\"receivePlayerName\");\n    };\n  }, []);\n  return {\n    playerName,\n    setPlayerName,\n    playerNameReceived,\n    sendPlayerName\n  };\n};\n\n// check if room exist\n_s2(usePlayerName, \"/+2K16Y0Gs8zekFeidY4jOzdpwg=\");\nexport const useCheckRoom = () => {\n  _s3();\n  const [roomExist, setRoomExist] = useState(false);\n  const sendRoomStatus = roomNo => {\n    socket.emit(\"checkRoomExist\", {\n      roomNo\n    });\n  };\n  useEffect(() => {\n    socket.on(\"roomExist\", message => {\n      setRoomExist(true);\n    });\n    socket.on(\"roomNotExist\", message => {\n      setRoomExist(false);\n    });\n    return () => {\n      socket.off(\"roomExist\");\n      socket.off(\"roomNotExist\");\n    };\n  }, []);\n  return roomExist;\n};\n_s3(useCheckRoom, \"PlZ3/GeJyuUwUg15SjF6FOCrO14=\");","map":{"version":3,"names":["useEffect","useState","io","socket","connect","useOnlineClients","_s","onlineClients","setOnlineClients","on","count","off","usePlayerName","_s2","playerName","setPlayerName","playerNameReceived","setPlayerNameReceived","sendPlayerName","roomNo","difficulty","emit","message","alert","data","useCheckRoom","_s3","roomExist","setRoomExist","sendRoomStatus"],"sources":["/Users/win_thanatpong/Desktop/FindMyMines/frontend/src/hooks/socketHooks.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport io from 'socket.io-client';\n\nconst socket = io.connect('http://localhost:9000');\n\n// check online clients\nexport const useOnlineClients = () => {\n  const [onlineClients, setOnlineClients] = useState(0);\n\n  useEffect(() => {\n    socket.on('onlineClients', (count) => {\n      setOnlineClients(count);\n    });\n\n    return () => {\n      socket.off('onlineClients');\n    };\n  }, []);\n\n  return onlineClients;\n};\n\n// check room number and status\nexport const usePlayerName = () => {\n  const [playerName, setPlayerName] = useState(\"\");\n  const [playerNameReceived, setPlayerNameReceived] = useState(\"\");\n\n  const sendPlayerName = (roomNo, playerName, difficulty) => {\n    socket.emit(\"sendPlayerName\", { playerName, roomNo, difficulty });\n  };\n\n  useEffect(() => {\n    socket.on(\"roomFull\", message => {\n        alert(message);\n    })\n\n    socket.on(\"receivePlayerName\", (data) => {\n      setPlayerNameReceived(data.playerName);\n    });\n\n    return () => {\n      socket.off(\"receivePlayerName\");\n    };\n  }, []);\n\n  return { playerName, setPlayerName, playerNameReceived, sendPlayerName };\n};\n\n// check if room exist\nexport const useCheckRoom = () => {\n  \n  const [roomExist, setRoomExist] = useState(false);\n\n  const sendRoomStatus = (roomNo) => {\n    socket.emit(\"checkRoomExist\", { roomNo });\n  };\n\n  useEffect(() => {\n    socket.on(\"roomExist\", message => {\n      setRoomExist(true);\n    });\n\n    socket.on(\"roomNotExist\", message => {\n      setRoomExist(false);\n    });\n\n    return () => {\n      socket.off(\"roomExist\")\n      socket.off(\"roomNotExist\");\n    }\n  }, [])\n\n  return roomExist;\n\n}"],"mappings":";;;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,EAAE,MAAM,kBAAkB;AAEjC,MAAMC,MAAM,GAAGD,EAAE,CAACE,OAAO,CAAC,uBAAuB,CAAC;;AAElD;AACA,OAAO,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpC,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC;EAErDD,SAAS,CAAC,MAAM;IACdG,MAAM,CAACM,EAAE,CAAC,eAAe,EAAGC,KAAK,IAAK;MACpCF,gBAAgB,CAACE,KAAK,CAAC;IACzB,CAAC,CAAC;IAEF,OAAO,MAAM;MACXP,MAAM,CAACQ,GAAG,CAAC,eAAe,CAAC;IAC7B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOJ,aAAa;AACtB,CAAC;;AAED;AAAAD,EAAA,CAhBaD,gBAAgB;AAiB7B,OAAO,MAAMO,aAAa,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACjC,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACe,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAEhE,MAAMiB,cAAc,GAAGA,CAACC,MAAM,EAAEL,UAAU,EAAEM,UAAU,KAAK;IACzDjB,MAAM,CAACkB,IAAI,CAAC,gBAAgB,EAAE;MAAEP,UAAU;MAAEK,MAAM;MAAEC;IAAW,CAAC,CAAC;EACnE,CAAC;EAEDpB,SAAS,CAAC,MAAM;IACdG,MAAM,CAACM,EAAE,CAAC,UAAU,EAAEa,OAAO,IAAI;MAC7BC,KAAK,CAACD,OAAO,CAAC;IAClB,CAAC,CAAC;IAEFnB,MAAM,CAACM,EAAE,CAAC,mBAAmB,EAAGe,IAAI,IAAK;MACvCP,qBAAqB,CAACO,IAAI,CAACV,UAAU,CAAC;IACxC,CAAC,CAAC;IAEF,OAAO,MAAM;MACXX,MAAM,CAACQ,GAAG,CAAC,mBAAmB,CAAC;IACjC,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEG,UAAU;IAAEC,aAAa;IAAEC,kBAAkB;IAAEE;EAAe,CAAC;AAC1E,CAAC;;AAED;AAAAL,GAAA,CAzBaD,aAAa;AA0B1B,OAAO,MAAMa,YAAY,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAEhC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAG3B,QAAQ,CAAC,KAAK,CAAC;EAEjD,MAAM4B,cAAc,GAAIV,MAAM,IAAK;IACjChB,MAAM,CAACkB,IAAI,CAAC,gBAAgB,EAAE;MAAEF;IAAO,CAAC,CAAC;EAC3C,CAAC;EAEDnB,SAAS,CAAC,MAAM;IACdG,MAAM,CAACM,EAAE,CAAC,WAAW,EAAEa,OAAO,IAAI;MAChCM,YAAY,CAAC,IAAI,CAAC;IACpB,CAAC,CAAC;IAEFzB,MAAM,CAACM,EAAE,CAAC,cAAc,EAAEa,OAAO,IAAI;MACnCM,YAAY,CAAC,KAAK,CAAC;IACrB,CAAC,CAAC;IAEF,OAAO,MAAM;MACXzB,MAAM,CAACQ,GAAG,CAAC,WAAW,CAAC;MACvBR,MAAM,CAACQ,GAAG,CAAC,cAAc,CAAC;IAC5B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOgB,SAAS;AAElB,CAAC;AAAAD,GAAA,CAzBYD,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}