{"ast":null,"code":"var _jsxFileName = \"/Users/win_thanatpong/Desktop/netcent-FindMyMines/frontend/src/pages/Game.js\";\nimport React from \"react\";\nimport Wait from \"../components/Wait\";\nimport Status from \"../components/Status\";\nimport GridEasy from \"../components/GridEasy\";\nimport io from \"socket.io-client\";\nimport qs from \"qs\";\nimport { Navigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = \"http://localhost:9000/\";\n//const socket = io(ENDPOINT);\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.setTurn = turn => {\n      this.setState({\n        turn: this.state.playerIndex === turn\n      });\n    };\n    this.setGame = gameState => {\n      this.setState({\n        game: gameState\n      });\n    };\n    this.gameStart = (gameState, players, turn) => {\n      const opponent = players[this.state.playerIndex === 0 ? 1 : 0][1];\n      this.setState({\n        opponentPlayer: [opponent, 0],\n        end: false\n      });\n      this.setGame(gameState);\n      this.setTurn(turn);\n      this.setMessage();\n    };\n    this.handleClick = (row, col) => {\n      const {\n        grid,\n        end,\n        turn,\n        room,\n        playerIndex\n      } = this.state;\n      if (!grid[row][col] && !end && turn) {\n        this.socket.emit(\"move\", {\n          room,\n          playerIndex,\n          row,\n          col\n        });\n      }\n    };\n    this.cellClicked = (row, col) => {\n      if (this.state.turn && !this.state.end) {\n        this.socket.emit(\"move\", {\n          room: this.state.room,\n          player: this.state.playerIndex,\n          row,\n          col\n        });\n      }\n    };\n    this.handleUpdate = (gameState, turn) => {\n      this.setGame(gameState);\n      this.setTurn(turn);\n      this.setMessage();\n    };\n    this.renderGrid = () => {\n      if (this.state.minefield) {\n        return /*#__PURE__*/_jsxDEV(GridEasy, {\n          minefield: this.state.minefield,\n          handleClick: this.handleClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 9\n        }, this);\n      }\n      return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 12\n      }, this);\n    };\n    this.render = () => {\n      if (this.state.joinError) {\n        return /*#__PURE__*/_jsxDEV(Navigate, {\n          to: `/`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 14\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Wait, {\n            display: this.state.waiting,\n            room: this.state.room\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Status, {\n            message: this.state.statusMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: this.renderGrid()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true);\n        // }\n      }\n    };\n    this.state = {\n      minefield: null,\n      grid: null,\n      playerIndex: null,\n      firstPlayer: null,\n      turn: true,\n      end: false,\n      room: \"\",\n      statusMessage: \"\",\n      currentPlayerScore: 0,\n      opponentPlayer: [],\n      selectedAvatar: null,\n      opponentAvatar: null,\n      streakBombs: 0,\n      waiting: false,\n      joinError: false\n    };\n  }\n  componentDidMount() {\n    this.socket = io(ENDPOINT);\n    let {\n      room,\n      name,\n      difficulty,\n      playerIndex,\n      avatar\n    } = qs.parse(window.location.search, {\n      ignoreQueryPrefix: true\n    });\n    this.setState({\n      room\n    });\n    this.setState({\n      playerIndex\n    });\n    if (avatar === \"undefined\") avatar = \"avatar1\";\n    this.setState({\n      selectedAvatar: avatar\n    });\n    this.socket.emit(\"newRoomJoin\", {\n      room,\n      name,\n      difficulty,\n      avatar,\n      playerIndex\n    });\n    this.socket.on(\"waiting\", () => this.setState({\n      waiting: true,\n      currentPlayerScore: 0,\n      opponentPlayer: []\n    }));\n    //gameState:revealedCells array, players:[[id1, name1], [id2, name2]], turn,\n    this.socket.on(\"starting\", ({\n      minefield,\n      gameState,\n      players,\n      turn,\n      avatars\n    }) => {\n      this.setState({\n        minefield: minefield,\n        waiting: false,\n        opponentAvatar: avatars[playerIndex === 0 ? 1 : 0]\n      });\n      this.gameStart(gameState, players, turn);\n      console.log(gameState, players, turn, this.state.selectedAvatar, this.state.opponentAvatar);\n      console.log(minefield);\n    });\n    this.socket.on(\"joinError\", () => this.setState({\n      joinError: true\n    }));\n    this.socket.on(\"setFirstPlayer\", ({\n      firstPlayer\n    }) => {\n      this.setState({\n        firstPlayer: firstPlayer\n      });\n    });\n    this.socket.on(\"update\", ({\n      gameState,\n      turn\n    }) => this.handleUpdate(gameState, turn));\n    socket.on(\"winner\", ({\n      gameState,\n      turn\n    }) => this.handleWin(gameState, turn));\n    socket.on(\"restart\", ({\n      gameState,\n      turn\n    }) => this.handleRestart(gameState, turn));\n  }\n  setMessage() {\n    const message = this.state.turn ? \"Your Turn\" : `${this.state.opponentPlayer[0]}'s Turn`;\n    this.setState({\n      statusMessage: message\n    });\n  }\n}\nexport default Game;","map":{"version":3,"names":["React","Wait","Status","GridEasy","io","qs","Navigate","jsxDEV","_jsxDEV","Fragment","_Fragment","ENDPOINT","Game","Component","constructor","props","setTurn","turn","setState","state","playerIndex","setGame","gameState","game","gameStart","players","opponent","opponentPlayer","end","setMessage","handleClick","row","col","grid","room","socket","emit","cellClicked","player","handleUpdate","renderGrid","minefield","fileName","_jsxFileName","lineNumber","columnNumber","render","joinError","to","children","display","waiting","message","statusMessage","firstPlayer","currentPlayerScore","selectedAvatar","opponentAvatar","streakBombs","componentDidMount","name","difficulty","avatar","parse","window","location","search","ignoreQueryPrefix","on","avatars","console","log","handleWin","handleRestart"],"sources":["/Users/win_thanatpong/Desktop/netcent-FindMyMines/frontend/src/pages/Game.js"],"sourcesContent":["import React from \"react\";\n\nimport Wait from \"../components/Wait\";\nimport Status from \"../components/Status\";\nimport GridEasy from \"../components/GridEasy\";\n\nimport io from \"socket.io-client\";\nimport qs from \"qs\";\nimport { Navigate } from \"react-router-dom\";\n\nconst ENDPOINT = \"http://localhost:9000/\";\n//const socket = io(ENDPOINT);\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      minefield: null,\n      grid: null,\n      playerIndex: null,\n      firstPlayer: null,\n      turn: true,\n      end: false,\n      room: \"\",\n      statusMessage: \"\",\n      currentPlayerScore: 0,\n      opponentPlayer: [],\n      selectedAvatar: null,\n      opponentAvatar: null,\n      streakBombs: 0,\n      waiting: false,\n      joinError: false,\n    };\n  }\n\n  componentDidMount() {\n    this.socket = io(ENDPOINT);\n    let { room, name, difficulty, playerIndex, avatar } = qs.parse(\n      window.location.search,\n      {\n        ignoreQueryPrefix: true,\n      }\n    );\n    this.setState({ room });\n    this.setState({ playerIndex });\n    if (avatar === \"undefined\") avatar = \"avatar1\";\n    this.setState({ selectedAvatar: avatar });\n    this.socket.emit(\"newRoomJoin\", {\n      room,\n      name,\n      difficulty,\n      avatar,\n      playerIndex,\n    });\n    this.socket.on(\"waiting\", () =>\n      this.setState({\n        waiting: true,\n        currentPlayerScore: 0,\n        opponentPlayer: [],\n      })\n    );\n    //gameState:revealedCells array, players:[[id1, name1], [id2, name2]], turn,\n    this.socket.on(\"starting\", ({ minefield, gameState, players, turn, avatars }) => {\n      this.setState({\n        minefield: minefield,\n        waiting: false,\n        opponentAvatar: avatars[playerIndex === 0 ? 1 : 0],\n      });\n      this.gameStart(gameState, players, turn);\n      console.log(gameState, players, turn, this.state.selectedAvatar ,this.state.opponentAvatar);\n      console.log(minefield);\n    });\n    this.socket.on(\"joinError\", () => this.setState({ joinError: true }));\n    this.socket.on(\"setFirstPlayer\", ({ firstPlayer }) => {\n      this.setState({ firstPlayer: firstPlayer });\n    });\n    this.socket.on(\"update\", ({ gameState, turn }) =>\n      this.handleUpdate(gameState, turn)\n    );\n    socket.on(\"winner\", ({ gameState, turn }) =>\n      this.handleWin(gameState, turn)\n    );\n    socket.on(\"restart\", ({ gameState, turn }) =>\n      this.handleRestart(gameState, turn)\n    );\n  }\n\n  setTurn = (turn) => {\n    this.setState({ turn: this.state.playerIndex === turn });\n  };\n\n  setGame = (gameState) => {\n    this.setState({ game: gameState });\n  };\n\n  setMessage() {\n    const message = this.state.turn\n      ? \"Your Turn\"\n      : `${this.state.opponentPlayer[0]}'s Turn`;\n    this.setState({ statusMessage: message });\n  }\n\n  gameStart = (gameState, players, turn) => {\n    const opponent = players[this.state.playerIndex === 0 ? 1 : 0][1];\n    this.setState({ opponentPlayer: [opponent, 0], end: false });\n    this.setGame(gameState);\n    this.setTurn(turn);\n    this.setMessage();\n  };\n\n  handleClick = (row, col) => {\n    const { grid, end, turn, room, playerIndex } = this.state;\n    if (!grid[row][col] && !end && turn) {\n      this.socket.emit(\"move\", { room, playerIndex, row, col });\n    }\n  };\n\n  cellClicked = (row, col) => {\n    if (this.state.turn && !this.state.end) {\n      this.socket.emit(\"move\", {\n        room: this.state.room,\n        player: this.state.playerIndex,\n        row,\n        col,\n      });\n    }\n  };\n\n  handleUpdate = (gameState, turn) => {\n    this.setGame(gameState);\n    this.setTurn(turn);\n    this.setMessage();\n  };\n\n  renderGrid = () => {\n    if (this.state.minefield) {\n      return(\n        <GridEasy minefield={this.state.minefield} handleClick={this.handleClick}/>\n      );\n    }\n    return <div></div>;\n  }\n\n  render = () => {\n    if (this.state.joinError) {\n      return <Navigate to={`/`} />;\n    } else {\n      return (\n        <>\n          <Wait display={this.state.waiting} room={this.state.room} />\n          <Status message={this.state.statusMessage} />\n          <div>\n            {this.renderGrid()}\n          </div>\n        </>\n      );\n      // }\n    }\n  }\n}\nexport default Game;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}