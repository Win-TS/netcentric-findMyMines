{"ast":null,"code":"var _jsxFileName = \"/Users/win_thanatpong/Desktop/netcent-FindMyMines/frontend/src/pages/Game.js\";\nimport React from \"react\";\nimport Wait from \"../components/Wait\";\nimport Status from \"../components/Status\";\nimport GridEasy from \"../components/GridEasy\";\nimport io from \"socket.io-client\";\nimport qs from \"qs\";\nimport { Navigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = \"http://localhost:9000/\";\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.setTurn = turn => {\n      if (this.state.playerIndex === turn) {\n        this.setState({\n          turn: true\n        });\n      } else {\n        this.setState({\n          turn: false\n        });\n      }\n    };\n    this.setGame = gameState => {\n      this.setState({\n        game: gameState\n      });\n    };\n    this.gameStart = (gameState, players, turn) => {\n      const opponent = players[this.state.playerIndex === 0 ? 1 : 0];\n      this.setState({\n        opponentPlayer: [opponent, 0],\n        end: false\n      });\n      this.setGame(gameState);\n      this.setTurn(turn);\n      this.setMessage();\n    };\n    this.handleClick = (row, col) => {\n      const {\n        grid,\n        end,\n        turn,\n        room,\n        playerIndex\n      } = this.state;\n      if (!grid[row][col] && !end && turn) {\n        this.socket.emit(\"move\", {\n          room,\n          playerIndex,\n          row,\n          col\n        });\n      }\n    };\n    this.handleUpdate = (gameState, turn) => {\n      this.setGame(gameState);\n      this.setTurn(turn);\n      this.setMessage();\n    };\n    this.state = {\n      grid: null,\n      playerIndex: null,\n      firstPlayer: null,\n      turn: true,\n      end: false,\n      room: \"\",\n      statusMessage: \"\",\n      currentPlayerScore: 0,\n      opponentPlayer: [],\n      selectedAvatar: null,\n      opponentAvatar: null,\n      streakBombs: 0,\n      waiting: false,\n      joinError: false\n    };\n    this.socketID = null;\n  }\n  componentDidMount() {\n    this.socket = io(ENDPOINT);\n    let {\n      room,\n      name,\n      difficulty,\n      playerIndex,\n      avatar\n    } = qs.parse(window.location.search, {\n      ignoreQueryPrefix: true\n    });\n    this.setState({\n      room\n    });\n    this.setState({\n      playerIndex\n    });\n    if (avatar === \"undefined\") avatar = \"avatar1\";\n    this.setState({\n      avatar\n    });\n    console.log(avatar);\n    this.socket.emit(\"newRoomJoin\", {\n      room,\n      name,\n      difficulty,\n      avatar,\n      playerIndex\n    });\n    this.socket.on(\"waiting\", () => this.setState({\n      waiting: true,\n      currentPlayerScore: 0,\n      opponentPlayer: []\n    }));\n    //gameState:revealedCells array, players:[[id1, name1], [id2, name2]], turn,\n    this.socket.on(\"starting\", ({\n      gameState,\n      players,\n      turn,\n      avatars\n    }) => {\n      this.setState({\n        waiting: false,\n        opponentAvatar: avatars[playerIndex === 0 ? 1 : 0]\n      });\n      this.gameStart(gameState, players, turn);\n      console.log(gameState, players, turn);\n    });\n    this.socket.on(\"joinError\", () => this.setState({\n      joinError: true\n    }));\n    this.socket.on(\"setFirstPlayer\", ({\n      firstPlayer,\n      id\n    }) => {\n      this.setState({\n        firstPlayer: firstPlayer\n      });\n      this.socketID = id;\n    });\n    this.socket.on(\"update\", ({\n      gameState,\n      turn\n    }) => this.handleUpdate(gameState, turn));\n    this.socket.on(\"winner\", ({\n      gameState,\n      turn\n    }) => this.handleWin(gameState, turn));\n    this.socket.on(\"restart\", ({\n      gameState,\n      turn\n    }) => this.handleRestart(gameState, turn));\n  }\n  setMessage() {\n    const message = this.state.turn ? \"Your Turn\" : `${this.state.opponentPlayer[0]}'s Turn`;\n    this.setState({\n      statusMessage: message\n    });\n  }\n  render() {\n    if (this.state.joinError) {\n      return /*#__PURE__*/_jsxDEV(Navigate, {\n        to: `/`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 14\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Wait, {\n          display: this.state.waiting,\n          room: this.state.room\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Status, {\n          message: this.state.statusMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(GridEasy, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n      // }\n    }\n  }\n}\n\nexport default Game;","map":{"version":3,"names":["React","Wait","Status","GridEasy","io","qs","Navigate","jsxDEV","_jsxDEV","Fragment","_Fragment","ENDPOINT","Game","Component","constructor","props","setTurn","turn","state","playerIndex","setState","setGame","gameState","game","gameStart","players","opponent","opponentPlayer","end","setMessage","handleClick","row","col","grid","room","socket","emit","handleUpdate","firstPlayer","statusMessage","currentPlayerScore","selectedAvatar","opponentAvatar","streakBombs","waiting","joinError","socketID","componentDidMount","name","difficulty","avatar","parse","window","location","search","ignoreQueryPrefix","console","log","on","avatars","id","handleWin","handleRestart","message","render","to","fileName","_jsxFileName","lineNumber","columnNumber","children","display"],"sources":["/Users/win_thanatpong/Desktop/netcent-FindMyMines/frontend/src/pages/Game.js"],"sourcesContent":["import React from \"react\";\n\nimport Wait from \"../components/Wait\";\nimport Status from \"../components/Status\";\nimport GridEasy from \"../components/GridEasy\";\n\nimport io from \"socket.io-client\";\nimport qs from \"qs\";\nimport { Navigate } from \"react-router-dom\";\n\nconst ENDPOINT = \"http://localhost:9000/\";\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: null,\n      playerIndex: null,\n      firstPlayer: null,\n      turn: true,\n      end: false,\n      room: \"\",\n      statusMessage: \"\",\n      currentPlayerScore: 0,\n      opponentPlayer: [],\n      selectedAvatar: null,\n      opponentAvatar: null,\n      streakBombs: 0,\n      waiting: false,\n      joinError: false,\n    };\n    this.socketID = null;\n  }\n\n  componentDidMount() {\n    this.socket = io(ENDPOINT);\n    let { room, name, difficulty, playerIndex, avatar } = qs.parse(\n      window.location.search,\n      {\n        ignoreQueryPrefix: true,\n      }\n    );\n    this.setState({ room });\n    this.setState({ playerIndex });\n    if (avatar === \"undefined\") avatar = \"avatar1\";\n    this.setState({ avatar });\n    console.log(avatar);\n    this.socket.emit(\"newRoomJoin\", {\n      room,\n      name,\n      difficulty,\n      avatar,\n      playerIndex,\n    });\n    this.socket.on(\"waiting\", () =>\n      this.setState({\n        waiting: true,\n        currentPlayerScore: 0,\n        opponentPlayer: [],\n      })\n    );\n    //gameState:revealedCells array, players:[[id1, name1], [id2, name2]], turn,\n    this.socket.on(\"starting\", ({ gameState, players, turn, avatars }) => {\n      this.setState({\n        waiting: false,\n        opponentAvatar: avatars[playerIndex === 0 ? 1 : 0],\n      });\n      this.gameStart(gameState, players, turn);\n      console.log(gameState, players, turn);\n    });\n    this.socket.on(\"joinError\", () => this.setState({ joinError: true }));\n    this.socket.on(\"setFirstPlayer\", ({ firstPlayer, id }) => {\n      this.setState({ firstPlayer: firstPlayer });\n      this.socketID = id;\n    });\n    this.socket.on(\"update\", ({ gameState, turn }) =>\n      this.handleUpdate(gameState, turn)\n    );\n    this.socket.on(\"winner\", ({ gameState, turn }) =>\n      this.handleWin(gameState, turn)\n    );\n    this.socket.on(\"restart\", ({ gameState, turn }) =>\n      this.handleRestart(gameState, turn)\n    );\n  }\n\n  setTurn = (turn) => {\n    if (this.state.playerIndex === turn) {\n      this.setState({ turn: true });\n    } else {\n      this.setState({ turn: false });\n    }\n  };\n\n  setGame = (gameState) => {\n    this.setState({ game: gameState });\n  };\n\n  setMessage() {\n    const message = this.state.turn\n      ? \"Your Turn\"\n      : `${this.state.opponentPlayer[0]}'s Turn`;\n    this.setState({ statusMessage: message });\n  }\n\n  gameStart = (gameState, players, turn) => {\n    const opponent = players[this.state.playerIndex === 0 ? 1 : 0];\n    this.setState({ opponentPlayer: [opponent, 0], end: false });\n    this.setGame(gameState);\n    this.setTurn(turn);\n    this.setMessage();\n  };\n\n  handleClick = (row, col) => {\n    const { grid, end, turn, room, playerIndex } = this.state;\n    if (!grid[row][col] && !end && turn) {\n      this.socket.emit(\"move\", { room, playerIndex, row, col });\n    }\n  };\n\n  handleUpdate = (gameState, turn) => {\n    this.setGame(gameState);\n    this.setTurn(turn);\n    this.setMessage();\n  };\n\n  render() {\n    if (this.state.joinError) {\n      return <Navigate to={`/`} />;\n    } else {\n      return (\n        <>\n          <Wait display={this.state.waiting} room={this.state.room} />\n          <Status message={this.state.statusMessage} />\n          <GridEasy />\n        </>\n      );\n      // }\n    }\n  }\n}\nexport default Game;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}